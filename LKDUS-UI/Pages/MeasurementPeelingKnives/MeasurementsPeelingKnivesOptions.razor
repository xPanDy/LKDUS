@page "/measurementspeelingknivesoptions/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/"
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@inject IMachinesRepository machineRepository;
@inject IMeasurementRepository repo
@inject NavigationManager navManager





<div class="card">
    <div class="container">
        <div class="row">
            <div class="col">
                <button type="button" @onclick="@Return" class="btn btn-primary  ">Atpakaļ</button>
            </div>

            @*<div class="col">
                <button type="submit" class="btn btn-primary btn-block">Saglabāt</button>
            </div>*@

        </div><div class="row">
    <div class="col w-25"><h3 class="card-title">Lobnaža asināšana</h3></div>
</div>
    </div>
    <div>
        <div class="row">
            <div class="col w-25 h-25">
                <button class="btn btn-warning btn-block" @onclick="@NavigatetoPoints">
                    <h3>Pārbaudes punkti</h3>
                </button>
            </div>


            <div class="col"><button class="btn btn-warning btn-block" @onclick="@NavigatetoAngle">
                <h3>Nažu izmēri un asināšanas leņķis</h3> </button></div>


            <div class="w-100"></div>

        </div>
        @*<div class="btn-group mr-2" role="group" aria-label="First group">
                <button type="button" class="btn btn-secondary btn-block btn-huge">Lokšņu platums</button>
                <button type="button" class="btn btn-secondary btn-block btn-huge">Lokšņu garums</button>

            </div>*@
    </div>

</div>






@code {
    private IList<Measurement> Model2;


    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }

    Machine machine = new Machine();

    protected async override Task OnInitializedAsync()
    {
        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        machine.Id = int.Parse(pmachineIdd);

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, machine.Id);
    }

    private IList<Machine> Machines;

    private void checkParams()
    {



        if (machine.Id == 0)
        {
            machine.Id = Machines.FirstOrDefault().Id;

        }
        if (stringPackValue == null)
        {
            stringPackValue = "0";
        }
    }


    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }


    private void Return(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurementspeelingknives/{userId}/{measurementPositionId}/create");
    }


    private void NavigatetoPoints(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/measurementdimensions/width");
    }

    private void NavigatetoAngle(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/measurementdimensions/length");
    }
}
