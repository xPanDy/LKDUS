@page "/measurementspeelingknivespoints/{userId}/{measurementPositionId}/{pmachineIdd}"
@*  *@
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@inject IMachinesRepository machineRepository;
@inject IMeasurementRepository measurementRepository
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime;
@inject IAuthenticationRepository authRepo
 
@inject IMeasurementTypeRepository measurementTypeRepository;
@inject IPacksRepository packRepo


<div class="card border-0 h-100 ">
    <div class="container">
        <div class="row">
            <div class="col">
                <button type="button" @onclick="@Return" class="btn btn-primary  ">Atpakaļ</button>
            </div>
            <div class="col">
                @* <button  @onclick="@SaveMeasurement" type="submit" class="btn btn-primary btn-block">Saglabāt</button>*@
            </div>
            <div class="col">
                <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
            </div>

        </div><div class="row">
            <div class="col w-25"><h3 class="card-title">Lobnaža asināšana</h3></div>
        </div>
    </div>
    <div>


        <div class="w-100 h-55"></div>



        <div class="row   w-90">
            @{ int lengthPosition2 = 50;
                for (int i = 0; i < positions.GetLength(0); i++)

                {

                    var tmp = i;
                    lengthPosition2 = i * 150 + lengthPosition;

                    <div class="col">
                        <div class="row"><input disabled style="background-color:@colors[i]" @bind-value="@positions[i]" /></div>
                        <div class="row">
                            @*@onclick="(el=>setPositionValue(tmp))"*@
                            <button style=" border-color:@colorBgs[tmp]"
                                    class="btn disabled">
                                @lengthPosition2
                            </button>
                        </div>
                        <div class="row w-100 p-1 h-80"><button @onclick="el=>plus(tmp)" class="btn btn-primary h-25 w-100">+</button></div>
                        <div class="row w-100 p-1 h-80"><button @onclick="el=> minus(tmp)" class="btn btn-primary h-25 w-100">-</button></div>
                    </div>


                }
            }




        </div>

    </div>

</div>






@code {
    MeasurementType mt = new MeasurementType();
    Machine machine = new Machine();


    private async void SaveMeasurement()
    {
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTime = Convert.ToDateTime("12:00:00");
        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);
        // int packId = int.Parse(stringPackValue);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTime) >= 0)
        {
            shift = 2;
        }

        //  IList<Measurement> measurementsToCreate = new List<Measurement>();


        Measurement meas = new Measurement();
        meas.DateCreated = measurementDateAndTime;
        meas.Shift = shift;
        meas.UserId = userId;
        // meas.MachineName = fusMachineName;
        meas.MeasurementPositionId = int.Parse(measurementPositionId);
        // meas.PackId = packId;
        meas.MeasurementTypeId = 7;
        meas.Measurement1 = positions[0];
        meas.Measurement2 = positions[1];
        meas.Measurement3 = positions[2];
        meas.Measurement4 = positions[3];
        meas.Measurement5 = positions[4];
        meas.Measurement6 = positions[5];
        meas.Measurement7 = positions[6];
        meas.Measurement8 = positions[7];
        meas.Measurement9 = positions[8];
        meas.Measurement10 = positions[9];
        meas.PackId = 0;



       // measurementsToCreate.Add(meas);

        //   isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas); 
        // isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);

        Pack pack = new Pack();
        Machine machine = new Machine();

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = measurementDateAndTime;
        //pack.Machine = fusMachineName; //machine.Name;
        pack.Machine = machine.Name;
        pack.Shift = shift;
        pack.Author = user.UserName;
        // pack.FusCode = stringPackValue;
        pack.MeasurementTypeName = mt.Name;

        isPackCreated = await packRepo.Create(Endpoints.PacksEndpoint, pack);
       
        isSuccess = await measurementRepository.Create(Endpoints.MeasurementEndpoint, meas);
        
        if (isPackCreated && isSuccess)
        {   // "/measurementspeelingknives/{userId}/{measurementPositionId}"
            // measurementspeelingknivesangle /{ userId}/{ measurementPositionId}/{ pmachineIdd}
            this.navManager.NavigateTo($"/measurementspeelingknivesangle/{userId}/{measurementPositionId}/{pmachineIdd}");
        }
    }

    int posId = 0;
    int lengthPosition;
    decimal correctedValue = 0.1m;
    private string bgOk = "";
    private string visible = "hidden";
    decimal[] correctedValues = new decimal[10];//0.1m;
    private void minus(int number)
    {



        for (int i = 0; i < positions.GetLength(0); i++)
        {
            if (number == i)
            {
                if (positions[i] > 0.00m)
                {
                    //correctedValue = Decimal.Add(correctedValue, -.05m);

                    positions[i] = Decimal.Add(positions[i], -.05m);// Decimal.a positions[i] + correctedValue;

                    if (positions[i] == 0.00m)
                    {

                        colors[number] = "greenyellow";
                    }
                    else if (positions[i] > 0.00m)
                    {
                        colors[number] = "yellow";
                    }
                }
            }
        }
    }

    private string[] colorBgs = new string[10];//[tmp]"


    private void plus(int number)
    {

        for (int i = 0; i < positions.GetLength(0); i++)
        {
            if (number == i)
            {
                if (positions[i] >= 0.00m)
                {

                    positions[i] = Decimal.Add(positions[i], .05m);



                    if (positions[i] == 0.00m)
                    {

                        colors[number] = "greenyellow";
                    }
                    else if (positions[i] > 0.00m)
                    {
                        colors[number] = "yellow";
                    }
                }
            }
        }



    }
    private void setPositionValue(int position)
    {
        for (int i = 0; i < colorBgs.GetLength(0); i++)
        {
            colorBgs[i] = "";
        }

        colorBgs[position] = "greenyellow";
        for (int i = 0; i < positions.GetLength(0); i++)
        {
            if (position == i)
            {

                posId = i;
                positions[i] = correctedValue;


            }
        }


    }
    private void ArePointsOk(bool isOk)
    {
        if (isOk)
        {
            bgOk = "greenyellow";
            visible = "hidden";
            isOk = true;
            for (int i = 0; i < positions.GetLength(0); i++)
            {
                positions[i] = 0;
            }
        }
        else
        {
            correctedValue = 0.1m;
            visible = "visible";
            bgOk = "";
        }
    }
    private IList<Measurement> Model2;
    public decimal[] positions = new decimal[10];
    public string[] colors = new string[10];

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }

    [Parameter]
    public string pmachineIdd { get; set; }



    protected async override Task OnInitializedAsync()
    {
        lengthPosition = 50;
        for (int i = 0; i < positions.GetLength(0); i++)
        {
            positions[i] = 0;
            colors[i] = "greenyellow";
        }
        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
    //    Model2 = await this.measurementRepository.Get(Endpoints.MeasurementEndpoint);
        machine.Id = int.Parse(pmachineIdd);

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, machine.Id);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 7);
    }

    private IList<Machine> Machines;

    private void checkParams()
    {



        if (machine.Id == 0)
        {
            machine.Id = Machines.FirstOrDefault().Id;

        }

    }


    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }

    bool isSuccess = false;
    bool isPackCreated = false;
    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/measurementspeelingknivesoptions/{userId}/{measurementPositionId}/{pmachineIdd}/");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/measurementspeelingknivesoptions/{userId}/{measurementPositionId}/{pmachineIdd}/");
            }
        }

    }





}
