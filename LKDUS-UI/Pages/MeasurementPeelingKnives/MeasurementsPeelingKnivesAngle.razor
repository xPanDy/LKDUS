@page "/measurementspeelingknivesangle/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/"
@*  *@
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using System.Globalization

@using LKDUS_UI.Service
@inject ToastService toastService
@inject IMachinesRepository machineRepository;
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime;
@inject IAuthenticationRepository authRepo

@inject IMeasurementTypeRepository measurementTypeRepository;
@inject IPacksRepository packRepo
<!--<div class="card border-0 h-100 ">
    <div class="container">
        <div class="row">
            <div class="col">
                <button type="button" @onclick="@Return" class="btn btn-primary  ">Atpakaļ</button>
            </div>
            <div class="col">-->
@* <button  @onclick="@SaveMeasurement" type="submit" class="btn btn-primary btn-block">Saglabāt</button>*@
<!--</div>
            <div class="col">
                <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
            </div>

        </div><div class="row">
            <div class="col w-25"><h3 class="card-title">Nažu izmēri un asināšanas leņķis</h3></div>
        </div>
    </div>
    <div>


        <div class="w-100 h-55"></div>





    </div>

</div>-->

<div class="vh-100 m-0 p-0" style="overflow: hidden;">
    <div style="height: 100%;  width:100%; background-color: white ">
        <!--navigation -->
        <div class=" col-md-8 mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:10%; float:left; background-color: white">
            <button class="btn-primary btn btn-block" @onclick="@Return" style="width:100%; height:100%;">Atpakaļ</button>
        </div>
        <div class=" col-md-8  mx-auto p-1 m-0  d-inline-block" style="width: 50%;height:10%; float:left;  background-color: white">
            <button class="btn-primary btn btn-block" @onclick="@SaveMeasurement" style="width:100%; height:100%;">Saglabāt</button>
        </div>
        <!--content -->
        <div class=" col-md-8   mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left; background-color: white">
            @*<div class="row-md-auto p-1">
                    <h5 style="text-align: center;">Naža garums/platums</h5>
                </div>*@


            <div class="row-md-auto p-1 align-middle">
                <h5 style="text-align: left;">
                    <label for="@idOfElement[0]">Naža garums:</label>
                </h5>

                <div>
                    @*class="input col-md-8 mx-auto p-1 m-0  d-inline-block form-control" @onclick="el => setPositionValue(0)" style="background-color:@colorBgs[0]; height:80px;" placeholder="">*@

                    <input id="@idOfElement[0]" readonly="readonly" style="        background-color: @colorBgs[0];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%"
                           @bind-value="positionsAngle[0]" @onclick="el => setPositionValue(0)" />
                </div>


            </div>


            <div class="row-md-auto p-1 align-middle">
                <h5 style="text-align: left;">
                    <label for="@idOfElement[2]">Naža platums kreisā puse:</label>
                </h5>
                @*<div id="@idOfElement[2]" type="text"   bind-value="@positionsAngle[2]" class="col-md-8  mx-auto p-1 m-0  d-inline-block form-control" @onclick="el=>setPositionValue(2)" style="background-color:@colorBgs[2]; height:80px;" placeholder=""></div>*@
                <input id="@idOfElement[2]" readonly="readonly" style="        background-color: @colorBgs[2];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%"
                       @bind-value="positionsAngle[2]" @onclick="el => setPositionValue(2)" />
            </div>
        </div>



        <div class="  col-md-8  mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left;  background-color: white;">
            @*<div class="row-md-auto p-1 align-middle">
                    <h5 style="text-align: left;"><label for="@idOfElement[3]">Asinājuma leņķis:</label></h5>
                    <div class="row-md-auto p-1 ">
                        <input id="@idOfElement[3]" readonly="readonly" style="        background-color: @colorBgs[3];
                        text-align: center;
                        font-size: 44px;
                        border: none;
                        height: 80px;
                        width: 100%"
                               @bind-value="@positionsAngle[3]" @onclick="el => setPositionValue(3)" />
                    </div>
                </div>*@
            <div class="row-md-auto p-1 align-middle">
                <h5 style="text-align: left;">
                    <label for="@idOfElement[3]">Asinājuma leņķis:</label>
                </h5>

                <div>
                    @*class="input col-md-8 mx-auto p-1 m-0  d-inline-block form-control" @onclick="el => setPositionValue(0)" style="background-color:@colorBgs[0]; height:80px;" placeholder="">*@

                    <input id="@idOfElement[3]" readonly="readonly" style="        background-color: @colorBgs[3];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%"
                           @bind-value="positionsAngle[3]" @onclick="el => setPositionValue(3)" />
                </div>


            </div>
            <div class="row-md-auto p-1 align-middle">
                <h5 style="text-align: left;">
                    <label for="@idOfElement[1]">Naža platums labā puse:</label>
                </h5>
                <div>
                    @*class="col-md-8  mx-auto p-1 m-0  d-inline-block form-control" @onclick="el=>setPositionValue(1)" style="background-color:@colorBgs[1]; height:80px;" placeholder="">*@
                    <input id="@idOfElement[1]" readonly="readonly" style="        background-color: @colorBgs[1];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%"
                           @bind-value="positionsAngle[1]" @onclick="el => setPositionValue(1)" />
                </div>

            </div>
        </div>
        @*<div class="table-responsive" style="height: 40%">
                <table class="table   p-0 m-0">
                    <tbody>
                        <tr>
                            <td>
                                <button type="button" class="btn btn-success  d-inline-block btn-lg btn-block" style="display:inline-block; width:100%; height:100%;" onclick="document.getElementById('selected').value = document.getElementById('selected').value + '1';">1</button>
                            </td>
                            <td> <button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '2';">2</button></td>
                            <td> <button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '3';">3</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value.slice(0, -1);">&lt;</button></td>
                        </tr>
                        <tr>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '4';">4</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '5';">5</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '6';">6</button></td>
                            <td> </td>
                        </tr>
                        <tr>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '7';">7</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '8';">8</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '9';">9</button></td>
                            <td rowspan="2"><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + ',';">,</button></td>
                        </tr>
                        <tr>
                            <td colspan="3"><button type="button" class="btn btn-success btn-lg btn-block" onclick="document.getElementById('selected').value=document.getElementById('selected').value + '0';">0</button></td>
                        </tr>
                    </tbody>
                </table>
            </div>*@
        <div class="table-responsive">
            <table class="table   p-0 m-0">
                <tbody>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-success  d-inline-block btn-lg btn-block" style="display:inline-block; width:100%; height:100%;" @onclick="e=>click('1')">1</button>
                        </td>
                        <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('2')">2</button></td>
                        <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('3')">3</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('-')">&lt;</button></td>
                    </tr>
                    <tr>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('4')">4</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('5')">5</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('6')">6</button></td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('7')">7</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('8')">8</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('9')">9</button></td>
                        <td rowspan="2"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click(',')">,</button></td>
                    </tr>
                    <tr>
                        <td colspan="3"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('0')">0</button></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>



@code {

    private void click(char valueToAdd)
    {

        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            if (idOfElement[i] == "selected")
            {
                if (!positionsAngle[i].Contains(','))
                {

                    if (positionsAngle[i].Length >= 4)
                    {

                        bool canContinue = true;
                        if (valueToAdd == '-' || valueToAdd == ',')
                        {

                            canContinue = true;
                        }
                        else
                        {
                            toastService.ShowToast("Pirms komata nedrīkst būt vairāk par 4 simboliem", ToastLevel.Error);
                            canContinue = false;
                        }



                        if (canContinue)
                        {
                            continue;
                        }
                        else
                        {
                            return;
                        }

                    }


                }
            }

        }


        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            if (idOfElement[i] == "selected")
            {

                if (positionsAngle[i].Contains(',') && valueToAdd == ',')
                {
                    return;
                }

                //   if(positionsAngle[i].Contains(',')&& positionsAngle[i].Substring)

                if (positionsAngle[i].Contains(","))
                {
                    string afterComma = positionsAngle[i].Substring(positionsAngle[i].IndexOf(",") + 1);


                    if (valueToAdd == '-')
                    {
                        if (positionsAngle[i].Length == 0)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i].Remove(positionsAngle[i].Length - 1, 1);
                    }
                    else
                    {
                        if (afterComma.Length >= 2)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i] + valueToAdd;
                    }




                }
                else
                {
                    if (valueToAdd == '-')
                    {
                        if (positionsAngle[i].Length == 0)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i].Remove(positionsAngle[i].Length - 1, 1);
                    }
                    else
                    {

                        positionsAngle[i] = positionsAngle[i] + valueToAdd;
                    }

                }





            }
        }


    }

    MeasurementType mt = new MeasurementType();
    Machine machine = new Machine();
    string[] idOfElement = new string[4];

    public void setAngleValue(int activePosition, int value)
    {
        positionsAngle[activePosition] = positionsAngle[activePosition] + "" + value;
    }
    private IList<Pack> ModelPacks;
    private async void SaveMeasurement()
    {
        //var pid = ModelPacks.Max(el => el.Id) + 1;
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }

        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }

        IList<Measurement> measurementsToCreate = new List<Measurement>();
        Pack pack = new Pack();
        Machine machine = new Machine();

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        // pack.Machine =  machine.Name;
        pack.Machine = machine.Name;
        pack.Shift = shift;
        pack.Author = user.UserName;
        // pack.FusCode = stringPackValue;
        pack.MeasurementTypeName = mt.Name;

        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');
        //isPackCreated = await packRepo.Create(Endpoints.PacksEndpoint, pack);

        Measurement meas = new Measurement();
        meas.DateCreated = DateTime.Parse(measurementDateAndTime);
        meas.Shift = shift;
        meas.UserId = userId;

        meas.MeasurementPositionId = int.Parse(measurementPositionId);

        meas.MeasurementTypeId = 8;

        bool isConverted = false;
        decimal value = 0.00m;


        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            if (decimal.TryParse(positionsAngle[i].ToString(), out value))
            {
                isConverted = true;

                // success - can use kilometro
            }
            else
            {
                isConverted = false;
                break;
            }
        }

        if (isConverted)
        {
            meas.Measurement1 = Convert.ToDecimal(positionsAngle[0].Replace(",", "."), CultureInfo.InvariantCulture);// decimal.Parse(positionsAngle[0]);
            meas.Measurement2 = Convert.ToDecimal(positionsAngle[1].Replace(",", "."), CultureInfo.InvariantCulture);// decimal.Parse(positionsAngle[1]);
            meas.Measurement3 = Convert.ToDecimal(positionsAngle[2].Replace(",", "."), CultureInfo.InvariantCulture);// decimal.Parse(positionsAngle[2]);
            meas.Measurement4 = Convert.ToDecimal(positionsAngle[3].Replace(",", "."), CultureInfo.InvariantCulture);// decimal.Parse(positionsAngle[3]);
        }
        else
        {

            toastService.ShowToast("Lūdzu, aizpildiet visus laukus", ToastLevel.Error);
            return;
        }
        meas.FusPackId = 0;
        // meas.PackId = pid;
        //meas.Measurement5 = positions[4];
        //meas.Measurement6 = positions[5];
        //meas.Measurement7 = positions[6];
        //meas.Measurement8 = positions[7];
        //meas.Measurement9 = positions[8];
        //meas.Measurement10 = positions[9];

        meas.PackId = int.Parse(elements[1]);



        measurementsToCreate.Add(meas);

        isSuccess = await repo.Create(Endpoints.MeasurementEndpoint, meas);



        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;// "/measurementspeelingknives/{userId}/{measurementPositionId}"
                                 //this.navManager.NavigateTo($"/measurementspeelingknives/{userId}/{measurementPositionId}");
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);


            this.navManager.NavigateTo($"/measurementspeelingknives/{userId}/{measurementPositionId}/create");


        }
    }

    int posId = 0;
    int lengthPosition;
    decimal correctedValue = 0.1m;
    private string bgOk = "";
    private string visible = "hidden";
    decimal[] correctedValues = new decimal[10];//0.1m;

    private string[] colorBgs = new string[4];//[tmp]"



    private void setPositionValue(int position)
    {
        for (int i = 0; i < colorBgs.GetLength(0); i++)
        {
            colorBgs[i] = "yellow";
            idOfElement[i] = "notselected";
        }

        colorBgs[position] = "greenyellow";
        idOfElement[position] = "selected";
        //for (int i = 0; i < positions.GetLength(0); i++)
        //{
        //    if (position == i)
        //    {
        //        posId = i;
        //        positions[i] = correctedValue;


        //    }
        //}


    }

    private IList<Measurement> Model2;
    public string[] positionsAngle = new string[4];
    public string[] colors = new string[10];

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }

    [Parameter]
    public string pmachineIdd { get; set; }

    [Parameter]
    public string pshift { get; set; }

    protected async override Task OnInitializedAsync()
    {
        ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);
        lengthPosition = 50;
        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            positionsAngle[i] = "";

        }

        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        machine.Id = int.Parse(pmachineIdd);

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, machine.Id);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 8);

        for (int i = 0; i < idOfElement.GetLength(0); i++)
        {
            colorBgs[i] = "yellow";

            idOfElement[0] = "notSelected";
        }
    }

    private IList<Machine> Machines;

    private void checkParams()
    {



        if (machine.Id == 0)
        {
            machine.Id = Machines.FirstOrDefault().Id;

        }

    }


    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }

    bool isSuccess = false;
    bool isPackCreated = false;
    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/measurementspeelingknivesoptions/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/measurementspeelingknivesoptions/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/");
            }
        }

    }





}
