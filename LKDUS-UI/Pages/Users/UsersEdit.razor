@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using Microsoft.Extensions.Logging

@inject NavigationManager navManager
@inject IAuthenticationRepository authRepo
 

@page "/useredit/{Id}"
@*@attribute [Authorize(Roles = "Administrator")]*@




<h3>Rediģēt Lietotāju</h3>
<hr />
<br />
@if ( string.IsNullOrWhiteSpace(Id))
{
    @*<ErrorMessage Message="Invalid Selection. Please Try Again" />*@
    <label>nepareiza izvēle, mēģini vēlreiz</label>
}
else if (Model == null)
{
    <LoadingMessage Message="Ielādē lietotāja informāciju" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Lietotājs</label>
            <InputText @bind-Value="Model.UserName" class="form-control" id="title" />
        </div>
      
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Saglabāt
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Atpakaļ
        </button>
    </EditForm>
}

@code{
    [Parameter]
    public string Id { get; set; }

    private LoginModel Model = new LoginModel();

    private bool isSuccess = true;


    protected override async Task OnInitializedAsync()
    {
      
         Model = await authRepo.Get( Endpoints.AspUsersEndpoint, Id);
     }

    private async Task HandleUpdate()
    {
       
        


         isSuccess = await authRepo.Update(Endpoints.RegisterUserEndpoint, Model, Model.Id );
        if (isSuccess)
        {
            //_toastService.ShowWarning("Book Updated Successfully", "");
            BackToList();
        }
        //}
    }

   


    private void BackToList()
    {
        navManager.NavigateTo("/users" +
            "/");
    }
}