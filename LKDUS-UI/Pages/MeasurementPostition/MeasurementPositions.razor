@page "/measurementpositions/"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http


@inject IMeasurementPositionsRepository measurementPositionsRepository
@inject NavigationManager navManager

<div class="card">
    <h3 class="card-title">Mērījumu pozīcijas</h3>


    @if (Positions == null)
    {
        <LoadingMessage Message="Notiek mērījumu pozīciju ielāde" />
    }
    else
    {


        <div class="container">

            <div class="container">

                @{

                    {
                        while (j < Positions.Count)
                        {
                            <div class="row mt-5">
                                <div class="col"><button class="btn btn-warning btn-block" @onclick="@(e=> NavigateToMeasurements(e,j))">@Positions[j].Name </button></div>

                                @{ j++;}
                                <div class="col"><button class="btn btn-warning btn-block" @onclick="@(e=> NavigateToMeasurements(e,j))">@Positions[j].Name </button></div>

                                <div class="w-100"></div>

                            </div>

                           j++;

                        }


                    }
               }

            </div>
        </div>

    }

</div>


@code {

    [Parameter]
    public string measurementPositionId { get; set; }
    int j = 0;
 
    



    private IList<MeasurementPosition> Positions;

    //parame
    private void NavigateToMeasurements(MouseEventArgs a, int i)
    {
        measurementPositionId = i.ToString();
        this.navManager.NavigateTo($"/measurements/{measurementPositionId}");
    }

    protected async override Task OnInitializedAsync()
    {


        Positions = await measurementPositionsRepository.Get(Endpoints.MeasurementPositions); //Model = await _repo.Get(Endpoints.BooksEndpoint);
    }
}
