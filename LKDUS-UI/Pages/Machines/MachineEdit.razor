
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using Microsoft.Extensions.Logging

@inject NavigationManager navManager
@inject IMachinesRepository machineRepo

@page "/books/edit/{Id}"

@*@attribute [Authorize(Roles = "Administrator")]*@

 


<h3>Rediģēt iekārtu</h3>
<hr />
<br />
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    @*<ErrorMessage Message="Invalid Selection. Please Try Again" />*@
    <label>nepareiza izvēle, mēģini vēlreiz</label>
}
else if (Model == null)
{
    <LoadingMessage Message="Ielādē iekārtas detaļas" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Iekārta</label>
            <InputText @bind-Value="Model.Name" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">Apraksts</label>
            <InputText @bind-Value="Model.Description" class="form-control" id="isbn" />
        </div>
        @*<div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
        </div>
        <div class="form-group">
            <label for="author">Authors</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
        </div>*@
        @*<div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            <InputFile OnChange="HandleFileSelection" />
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height:100px;width:100px" />
            }
        </div>*@
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Saglabāt
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Atpakaļ
        </button>
    </EditForm>
}

@code{
    [Parameter]
    public string Id { get; set; }

    private Machine Model = new Machine();
    //private IList<Author> Authors;
    //private IFileListEntry file;
    private bool isSuccess = true;
    //private bool isInvalidFileType = false;
    //private bool isFileChanged = false;
    //private string imageDataURL;
    //private MemoryStream msFile;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await machineRepo.Get(Endpoints.MachinesEndpoint, id);
        //Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task HandleUpdate()
    {
        //if (!isInvalidFileType)
        //{
        //    if (file != null)
        //    {
        //var ext = Path.GetExtension(file.Name);
        //var picId = Guid.NewGuid().ToString().Replace("-", "");
        //var picName = $"{picId}{ext}";

        //_fileUpload.RemoveFile(Model.Image);
        //_fileUpload.UploadFile(file, msFile, picName);

        //Model.Image = picName;
        //}
        //else if (isFileChanged && file == null)
        //{
        //    _fileUpload.RemoveFile(Model.Image);
        //    Model.Image = string.Empty;
        //}

        isSuccess = await machineRepo.Update(Endpoints.MachinesEndpoint, Model, Model.Id);
        if (isSuccess)
        {
            //_toastService.ShowWarning("Book Updated Successfully", "");
            BackToList();
        }
        //}
    }

    //private async Task HandleFileSelection(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    isFileChanged = true;
    //    if (file != null)
    //    {
    //        var name = file.Name;
    //        if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
    //        {
    //            msFile = new MemoryStream();
    //            await file.Data.CopyToAsync(msFile);

    //            var reader = new StreamReader(file.Data);
    //            var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
    //            imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
    //            isInvalidFileType = false;
    //        }
    //        else
    //        {
    //            isInvalidFileType = true;
    //            imageDataURL = string.Empty;
    //        }
    //    }
    //    else
    //    {
    //        isInvalidFileType = false;
    //    }
    //}


    private void BackToList()
    {
        navManager.NavigateTo("/machines/");
    }
}