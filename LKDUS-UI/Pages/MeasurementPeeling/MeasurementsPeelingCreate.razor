@page "/measurementspeeling/{userId}/{measurementPositionId}/create"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using Microsoft.Extensions.Logging

@inject IAuthenticationRepository authRepo
@inject IMeasurementRepository repo
@inject IFusPacksRepository frepo
@inject IMeasurementTypeRepository measTRepo
@inject IMeasurementPositionsRepository measPositionRepo
@inject IMachinesRepository machineRepository

@inject NavigationManager navManager
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider datetime;
@inject ILogger<FusPack> Logger




<div>



    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">@mp.Name</h3></div>
            <div class="col">
                @*<button type="submit" class="btn btn-primary btn-block">Saglabāt</button>*@
            </div>


        </div>
    </div>




    <!--<div class="form-group">
        
            <div class="row">
                <div class="col">
                    <button class="btn btn-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera" viewBox="0 0 16 16">
                            <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z" />
                            <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z" />
                        </svg>
                    </button>
                </div>

                <div class="col">
                    <label for="packCode">Pakas kods</label>-->


                    @*@bind=@packId*@

                    <!--<input class="form-control"
                           @bind-value="@stringPackValue"
                           @bind-value:event="oninput"
                           @onkeyup="DoSomethingElse"
                           type="text"
                           id="packCode">
                    if (fp == null)
                    {
                        <div class="alert alert-danger" role="alert">
                            Šāda paka neeksistē
                        </div>

                    }

                </div>
                 if (fp != null)
                {
                    <div class="col">

                        <label for="pack">Pakas Autors   </label>

                        <input class="form-control" readonly
                               @bind="@fp.OperatorNameSurname"
                               type="text" id="packAuthor">




                    </div>




                    <div class="col">
                        <label for="pack">Pakas datums</label>

                        <input class="form-control" type="text"
                               @bind="@fp.DateCreated"
                               readonly id="packDate">
                    </div>
                    <div class="col">
                        <label for="pack">Pakas iekārta</label>

                        <input class="form-control"
                               bind-value=" fp.MachineName" type="text" readonly id="packMachine">
                    </div>
                    <div class="col">
                        <label for="packMaster">Meistars</label>

                        <input class="form-control"
                             bind-value=" fp.Master" type="text" readonly id="packMaster">
                    </div>
                }
                else
                {
                    <div class="col">

                        <label for="pack">Pakas Autors   </label>

                        <input class="form-control" readonly
                               type="text" id="packAuthor">




                    </div>




                    <div class="col">
                        <label for="pack">Pakas datums</label>

                        <input class="form-control" type="text"
                               readonly id="packDate">
                    </div>
                    <div class="col">
                        <label for="pack">Pakas iekārta</label>

                        <input class="form-control"
                               type="text" readonly id="packMachine">
                    </div>

                    <div class="col">
                        <label for="pack">Meistars</label>

                        <input class="form-control"
                               type="text" readonly id="packMaster">
                    </div>
                }

            </div>
        }
    </div>-->




    @*<div class="form-group">
        <label for="machine">Iekārta</label>
        <select class="custom-select"  @bind="machine.Id"  id ="machine"  >
            
            @if (Machines != null)
            {
                @foreach (var Mach in Machines)
                {
                    //pmachineIdd = Mach.Id;

                    <option value="@Mach.Id">@Mach.Name</option>
                }
            }
        </select>

    </div>*@



    <div class="form-group">
        <label for="example-datetime-local-input" class="col-2 col-form-label">Datums     <br /></label>
        <div class="row">
            <div class="col">
                @*// 01.12.2020 09:19:04*@
                <select class="custom-select" @bind="Day">
                    @for (int i = 1; i <= 31; i++)
                    {
                        <option>@i</option>
                    }
                </select>

            </div>


            <div class="col">
                <select class="custom-select" @bind="Month">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@Months[i - 1]</option>
                    }
                </select>

            </div>


            <div class="col">
                <select class="custom-select" @bind="Year">
                    @for (int i = DateTime.Now.Year - 5;
                       i <= DateTime.Now.Year + 5; i++)
                    {
                        <option>@i</option>
                    }
                </select>
                
            </div>
            
        </div>


    </div>


    

    @if (LaborantList == null)
    {
        <LoadingMessage Message="Notiek laborantu ielāde" />
    }
    else { 
    <div class="form-group">
        <label for="operator">Laborants</label>
        <select disabled="true" class="custom-select" @bind=@defaultUser.UserName id="operator">

            
            @foreach (var usr in LaborantList)
            {

                <option>@usr.UserName</option>
            } 

            
        </select>

    </div>

    }
    <div class="form-group">
        <label for="shift">Maiņa</label>
        <select class="custom-select" @bind="@pshift" id="shift">
            <option selected>1</option>
            <option value="1">2</option>


            
        </select>

    </div>

 

    <nav class="navbar navbar-dark">
        <div class="container-fluid">
            
            <div class="navbar-btn">

                <button type="button" @onclick="@GoToPeeling" class="btn btn-primary">Tālāk</button>
            </div>
            

        </div>
    </nav>

</div>





@code {
    public string bindUsername { get; set; }
    public int Day { get; set; }
    public int Month { get; set; }
    public int Year { get; set; }

    public string[] Months { get; set; } = {
       "January", "February", "March",
       "April", "May", "June", "July",
       "August", "September", "October",
       "November", "December" };


    [Parameter]
    public int pshift { get; set; }
    // [Parameter]
    //  public int pmachineIdd { get; set; }
    [Parameter]
    public string userId { get; set; }


    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string packId { get; set; }
    [Parameter]
    public int pmeasurementTypeId { get; set; }

    public string stringPackValue
    {
        get;
        set;
    }

    string test = "";

    public string datums = "";
    public bool edited = false;

    //  public IList<FusPack> fusPacks;

    public IList<LoginModel> LaborantList ;


    // public FusPack fp = new FusPack();
    Machine machine = new Machine();



    private void changeMachine( )
    {

    }


    MeasurementPosition mp = new MeasurementPosition();

    protected async override void OnParametersSet()
    {
        //the param will be set now

    }

    private static DateTime today;
    private static string todayLocal = today.ToString("g");

    // public DateTime dateOfMeasurement { get; set; }
    // public string dateToday { get; set; }
    // public DateTime dateToday2 { get; set; }

    string currentLocalTime = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        pshift = 1;

        if (firstRender)
        {
            var browserDateTime = await datetime.GetInstance();

            today = DateTime.Today;
            currentLocalTime = browserDateTime.Now.ToString();
            StateHasChanged();

        }

    }



    private IList<Measurement> Model2;
    private IList<Measurement> FusMachines;
    private IList<Machine> Machines;
    public LoginModel defaultUser = new LoginModel();
    protected async override Task OnInitializedAsync()
    {

        Day = DateTime.Now.Day;
        Month = DateTime.Now.Month;
        Year = DateTime.Now.Year;

        LaborantList = await this.authRepo.Get(Endpoints.AspUsersEndpoint);

        defaultUser = LaborantList.Where(o => o.Id == userId).FirstOrDefault();

        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        //    FusMachines = await this.repo.Get(Endpoints.MeasurementEndpoint);

        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        try
        {
            int result = Int32.Parse(measurementPositionId);
            mp = await measPositionRepo.Get(Endpoints.MeasurementPositions, result);

        }

        catch (FormatException)
        {
            Console.WriteLine($"Unable to parse");
        }
        todayLocal = DateTime.Now.ToString("g");// today.ToString("g");
        //pmachineIdd = machine.Id;
        //if (pmachineIdd == 0)
        //{
        //    pmachineIdd = Machines.FirstOrDefault().Id;
        //}
        if (stringPackValue == null)
        {
            stringPackValue = "0";
        }
    }

    private void checkParams( )
    {
        //pmachineIdd = machine.Id;
        //if (pmachineIdd == 0)
        //{
        //    pmachineIdd = Machines.FirstOrDefault().Id;
        //}
        if (stringPackValue == null)
        {
            stringPackValue = "0";
        }
    }

    //private void GoToThickness(MouseEventArgs e)
    //{

    //    checkParams();

    //    //  validateParameters(measurementPositionId, measurementPositionId, stringPackValue, pmachineIdd, pshift);
    //    this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/create/thickness");
    //    //      /measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/thickness
    //    //     {userId}/{measurementPositionId}/{stringPackValue}/{ pmachineIdd}

    //}

    //private bool validateParameters(string p1, string p2, string p3, int p4, int p5 )
    //{
    //    //if (string.IsNullOrEmpty(stringPackValue)==true && (string.IsNullOrEmpty(stringPackValue))
    //    //{

    //    //    return true;
    //    //}
    //    //return false;
    //}

    private void GoToPeeling(MouseEventArgs e)
    {
        checkParams();
        this.navManager.NavigateTo($"/measurementspeeling/{userId}/{measurementPositionId}/{stringPackValue}/saving");
    }



    private void goBack(MouseEventArgs e)
    {
        this.navManager.NavigateTo($"/measurementspeeling/{userId}/{measurementPositionId}");
    }
}
