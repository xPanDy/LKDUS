@page "/measurementspeelingknivessettings/{userId}/{measurementPositionId}/create"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using Microsoft.Extensions.Logging

@inject IAuthenticationRepository authRepo
@inject IMeasurementRepository repo
@inject IFusPacksRepository frepo
@inject IMeasurementTypeRepository measTRepo
@inject IMeasurementPositionsRepository measPositionRepo
@inject IMachinesRepository machineRepository

@inject NavigationManager navManager
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider datetime;
@inject ILogger<FusPack> Logger




<div>



    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">@mp.Name</h3></div>
            <div class="col">
                @*<button type="submit" class="btn btn-primary btn-block">Saglabāt</button>*@
            </div>


        </div>
    </div>




    



    <div class="form-group">
        <label for="example-datetime-local-input" class="col-2 col-form-label">Datums     <br /></label>
        <div class="row">
            <div class="col">
                @*// 01.12.2020 09:19:04*@
                <select class="custom-select" @bind="Day">
                    @for (int i = 1; i <= 31; i++)
                    {
                        <option>@i</option>
                    }
                </select>

            </div>


            <div class="col">
                <select class="custom-select" @bind="Month">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@Months[i - 1]</option>
                    }
                </select>

            </div>


            <div class="col">
                <select class="custom-select" @bind="Year">
                    @for (int i = DateTime.Now.Year - 5;
                       i <= DateTime.Now.Year + 5; i++)
                    {
                        <option>@i</option>
                    }
                </select>
                
            </div>
            
        </div>


    </div>


    

    @if (LaborantList == null)
    {
        <LoadingMessage Message="Notiek laborantu ielāde" />
    }
    else { 
    <div class="form-group">
        <label for="operator">Laborants</label>
        <select disabled="true" class="custom-select" @bind=@defaultUser.UserName id="operator">

            
            @foreach (var usr in LaborantList)
            {

                <option>@usr.UserName</option>
            } 

            
        </select>

    </div>

    }
    <div class="form-group">
        <label for="shift">Maiņa</label>
        <select class="custom-select" @bind="@pshift" id="shift">
            <option selected>1</option>
            <option value="1">2</option>


            
        </select>

    </div>

 

    

</div>

<div class=" col-md-1 mx-auto ">
    
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToSetting(1)) " >4.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToSetting(2)) " >5.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToSetting(3)) " >6.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToSetting(4)) " >7.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToSetting(5)) " >8.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToSetting(6)) " >9.Līnijas nazis</button></div>





        


    </div>


    @code {
        public string bindUsername { get; set; }
        public int Day { get; set; }
        public int Month { get; set; }
        public int Year { get; set; }

        public string[] Months { get; set; } = {
        "Janvāris", "Februāris", "Marts",
       "Aprīlis", "Maijs", "Jūnijs", "Jūlijs",
       "Augusts", "Septembris", "Oktobris",
       "Novembris", "Decembris"  };


        [Parameter]
        public int pshift { get; set; }
        [Parameter]
        public int pmachineIdd { get; set; }
        [Parameter]
        public string userId { get; set; }


        [Parameter]
        public string measurementPositionId { get; set; }
        [Parameter]
        public string packId { get; set; }
        [Parameter]
        public int pmeasurementTypeId { get; set; }

        public string stringPackValue
        {
            get;
            set;
        }

        string test = "";

        public string datums = "";
        public bool edited = false;

        //  public IList<FusPack> fusPacks;

        public IList<LoginModel> LaborantList;


        // public FusPack fp = new FusPack();
        Machine machine = new Machine();



        private void changeMachine()
        {

        }


        MeasurementPosition mp = new MeasurementPosition();

        protected async override void OnParametersSet()
        {
            //the param will be set now

        }

        private static DateTime today;
        private static string todayLocal = today.ToString("g");

        // public DateTime dateOfMeasurement { get; set; }
        // public string dateToday { get; set; }
        // public DateTime dateToday2 { get; set; }

        string currentLocalTime = "";

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            pshift = 1;

            if (firstRender)
            {
                var browserDateTime = await datetime.GetInstance();

                today = DateTime.Today;
                currentLocalTime = browserDateTime.Now.ToString();
                StateHasChanged();

            }

        }



        private IList<Measurement> Model2;
        private IList<Measurement> FusMachines;
        private IList<Machine> Machines;
        public LoginModel defaultUser = new LoginModel();
        protected async override Task OnInitializedAsync()
        {

            Day = DateTime.Now.Day;
            Month = DateTime.Now.Month;
            Year = DateTime.Now.Year;

            LaborantList = await this.authRepo.Get(Endpoints.AspUsersEndpoint);

            defaultUser = LaborantList.Where(o => o.Id == userId).FirstOrDefault();

            Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
            FusMachines = await this.repo.Get(Endpoints.MeasurementEndpoint);

            Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
            try
            {
                int result = Int32.Parse(measurementPositionId);
                mp = await measPositionRepo.Get(Endpoints.MeasurementPositions, result);

            }

            catch (FormatException)
            {
                Console.WriteLine($"Unable to parse");
            }
            todayLocal = DateTime.Now.ToString("g");// today.ToString("g");
            pmachineIdd = machine.Id;
            if (pmachineIdd == 0)
            {
                pmachineIdd = Machines.FirstOrDefault().Id;
            }
            if (stringPackValue == null)
            {
                stringPackValue = "0";
            }
        }

        private void checkParams()
        {

            pmachineIdd = machine.Id;
            if (pmachineIdd == 0)
            {
                pmachineIdd = Machines.FirstOrDefault().Id;
            }
            if (stringPackValue == null)
            {
                stringPackValue = "0";
            }
        }

        //private void GoToThickness(MouseEventArgs e)
        //{

        //    checkParams();

        //    //  validateParameters(measurementPositionId, measurementPositionId, stringPackValue, pmachineIdd, pshift);
        //    this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/thickness");
        //    //      /measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/thickness
        //    //     {userId}/{measurementPositionId}/{stringPackValue}/{ pmachineIdd}

        //}

        //private bool validateParameters(string p1, string p2, string p3, int p4, int p5 )
        //{
        //    //if (string.IsNullOrEmpty(stringPackValue)==true && (string.IsNullOrEmpty(stringPackValue))
        //    //{

        //    //    return true;
        //    //}
        //    //return false;
        //}

        private void GoToSetting(int knive)
        {
            if (knive == 1)
            {
                //4.līnija
                machine = Machines.Where(m => m.Name == "4.līnija").FirstOrDefault();
            }
            if (knive == 2)
            {
                machine = Machines.Where(m => m.Name == "5.līnija").FirstOrDefault();
            }
            if (knive == 3)
            {
                machine = Machines.Where(m => m.Name == "6.līnija").FirstOrDefault();
            }
            if (knive == 4)
            {
                machine = Machines.Where(m => m.Name == "7.līnija").FirstOrDefault();
            }
            if (knive == 5)
            {
                machine = Machines.Where(m => m.Name.Equals("8.līnija")).FirstOrDefault();
            }
            if (knive == 6)
            {
                machine = Machines.Where(m => m.Name.Equals("9.līnija")).FirstOrDefault();
            }
            pmachineIdd = machine.Id;
            checkParams();
            this.navManager.NavigateTo($"/measurementspeelingknivessettingoptions/{userId}/{measurementPositionId}/{pmachineIdd}/");
        }



        private void goBack(MouseEventArgs e)
        {
            this.navManager.NavigateTo($"/measurementspeelingknivessettingview/{userId}/{measurementPositionId}");
        }
    }
