@page "/pressurelineheigh/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using LKDUS_UI.Service
@using System.Globalization

@inject ToastService toastService
@inject IMachinesRepository machineRepository;
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime;
@inject IAuthenticationRepository authRepo

@inject IMeasurementTypeRepository measurementTypeRepository;
@inject IPacksRepository packRepo

<div class="vh-100 m-0 p-0" style="overflow: hidden;">
    <div style="height: 100%;  width:100%; background-color: white ">
        <!--navigation -->
        <div class=" col-md-8 mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:10%; float:left; background-color: white">
            <button class="btn-primary btn btn-block" @onclick="@Return" style="width:100%; height:100%;"><h3>Atpakaļ</h3></button>
        </div>
        <div class=" col-md-8  mx-auto p-1 m-0  d-inline-block" style="width: 50%;height:10%; float:left;  background-color: white">
            <button class="btn-primary btn btn-block" @onclick="@SaveMeasurement" style="width:100%; height:100%;"><h3>Saglabāt</h3></button>
        </div>

        <div style=" margin: auto;
        width: 50%;
        padding: 10px;
        text-align: center;
">
            <h3>Spiedlīstes augstums virs naža</h3>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-sm">
                    <h5 style="text-align: left;">
                        <label for="@idOfElement[0]">Kreisā mala:</label>
                    </h5>
                    <div>
                        <input id="@idOfElement[0]" readonly="readonly" style="        background-color: @colorBgs[0];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%" type="text" @bind-value="@positionsAngle[0]" @onclick="el => setPositionValue(0)" />
                    </div>
                </div>
                <div class="col-sm">
                    <h5 style="text-align: left;"><label for="@idOfElement[1]">Vidus:</label></h5>
                    <div class="row-md-auto p-1 ">
                        <input id="@idOfElement[1]" type="text" readonly="readonly" style="        background-color: @colorBgs[1];
                text-align: center;
                font-size: 44px;
                border: none;
                height: 80px;
                width: 100%" @bind-value="@positionsAngle[1]" @onclick="el => setPositionValue(1)" />
                    </div>
                </div>
                <div class="col-sm">
                    <h5 style="text-align: left;"><label for="@idOfElement[2]">Labā mala:</label></h5>
                    <div class="row-md-auto p-1 ">
                        <input id="@idOfElement[2]" type="text" readonly="readonly" style="        background-color: @colorBgs[2];
                text-align: center;
                font-size: 44px;
                border: none;
                height: 80px;
                width: 100%" @bind-value="@positionsAngle[2]" @onclick="el => setPositionValue(2)" />
                    </div>
                </div>
            </div>
        </div>

        <!--con<div>t<>ent -->
        @*<div class=" col-md-8   mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left; background-color: white">
                <div class="row-md-auto p-1 align-middle">
                    <h5 style="text-align: left;">
                        <label for="@idOfElement[0]">Kreisā mala:</label>
                    </h5>
                    <div>
                        <input id="@idOfElement[0]" readonly="readonly" style="        background-color: @colorBgs[0];
                        text-align: center;
                        font-size: 44px;
                        border: none;
                        height: 80px;
                        width: 100%" type="text" @bind-value="@positionsAngle[0]" @onclick="el => setPositionValue(0)" />
                    </div>
                </div>
            </div>
            <div class="  col-md-8  mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left;  background-color: white;">
                <h5 style="text-align: left;"><label for="@idOfElement[1]">Vidus:</label></h5>
                <div class="row-md-auto p-1 ">
                    <input id="@idOfElement[1]" type="text" readonly="readonly" style="        background-color: @colorBgs[1];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%" @bind-value="@positionsAngle[1]" @onclick="el => setPositionValue(1)" />
                </div>
            </div>
            <div class="  col-md-8  mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left;  background-color: white;">
                <h5 style="text-align: left;"><label for="@idOfElement[2]">Labā mala:</label></h5>
                <div class="row-md-auto p-1 ">
                    <input id="@idOfElement[2]" type="text" readonly="readonly" style="        background-color: @colorBgs[2];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%" @bind-value="@positionsAngle[2]" @onclick="el => setPositionValue(2)" />
                </div>
            </div>*@


        <div class="table-responsive">
            <table class="table   p-0 m-0">
                <tbody>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-success  d-inline-block btn-lg btn-block" style="display:inline-block; width:100%; height:100%;" @onclick="e=>click('1')">1</button>
                        </td>
                        <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('2')">2</button></td>
                        <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('3')">3</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('-')">&lt;</button></td>
                    </tr>
                    <tr>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('4')">4</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('5')">5</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('6')">6</button></td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('7')">7</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('8')">8</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('9')">9</button></td>
                        <td rowspan="2"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click(',')">,</button></td>
                    </tr>
                    <tr>
                        <td colspan="3"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('0')">0</button></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

</div>


@code {
    MeasurementType mt = new MeasurementType();
    Machine machine = new Machine();
    string[] idOfElement = new string[4];


    string bindedValueOfActiveComponent = "";

    private void click(char valueToAdd)
    {



        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            if (idOfElement[i] == "selected")
            {

                if (positionsAngle[i].Contains(',') && valueToAdd == ',')
                {
                    return;
                }


                if (positionsAngle[i].Contains(","))
                {
                    string afterComma = positionsAngle[i].Substring(positionsAngle[i].IndexOf(",") + 1);


                    if (valueToAdd == '-')
                    {
                        if (positionsAngle[i].Length == 0)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i].Remove(positionsAngle[i].Length - 1, 1);
                    }
                    else
                    {
                        if (afterComma.Length >= 2)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i] + valueToAdd;
                    }




                }
                else
                {
                    if (valueToAdd == '-')
                    {
                        if (positionsAngle[i].Length == 0)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i].Remove(positionsAngle[i].Length - 1, 1);
                    }
                    else
                    {
                        positionsAngle[i] = positionsAngle[i] + valueToAdd;
                    }
                }





            }
        }


    }

    private IList<Pack> ModelPacks;
    private async void SaveMeasurement()
    {
        //var pid = ModelPacks.Max(el => el.Id) + 1;
        String measurementDateAndTime = DateTime.Now.ToString("g");
        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }

        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }

        IList<Measurement> measurementsToCreate = new List<Measurement>();
        Pack pack = new Pack();
        Machine machine = new Machine();

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        // pack.Machine =  machine.Name;
        pack.Machine = machine.Name;
        pack.Shift = shift;
        pack.Author = user.UserName;
        // pack.FusCode = stringPackValue;
        pack.MeasurementTypeName = mt.Name;

        // isPackCreated = await packRepo.Create(Endpoints.PacksEndpoint, pack);
        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');
        Measurement meas = new Measurement();
        meas.DateCreated = DateTime.Parse(measurementDateAndTime);
        meas.Shift = shift;
        meas.UserId = userId;
        // meas.MachineName = fusMachineName;
        meas.MeasurementPositionId = int.Parse(measurementPositionId);
        // meas.PackId = packId;

        meas.MeasurementTypeId = 9;

        bool isConverted = false;
        decimal value = 0.00m;


        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            if (decimal.TryParse(positionsAngle[i].ToString(), out value))
            {

                isConverted = true;


            }
            else
            {
                isConverted = false;
                break;


            }


        }

        if (isConverted)
        {
            //Convert.ToDecimal(positionsAngle[0].Replace(",", "."), CultureInfo.InvariantCulture);


            meas.Measurement1 = Convert.ToDecimal(positionsAngle[0].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement2 = Convert.ToDecimal(positionsAngle[1].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement3 = Convert.ToDecimal(positionsAngle[2].Replace(",", "."), CultureInfo.InvariantCulture);

        }
        else
        {

            toastService.ShowToast("Lūdzu, aizpildiet visus laukus", ToastLevel.Error);
            return;
        }
        meas.FusPackId = 0;
        meas.PackId = int.Parse(elements[1]);// pid;




        measurementsToCreate.Add(meas);


        isSuccess = await repo.Create(Endpoints.MeasurementEndpoint, meas);


        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;  // "/measurementspeelingknives/{userId}/{measurementPositionId}"
                                   //this.navManager.NavigateTo($"/measurementspeelingknives/{userId}/{measurementPositionId}");
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            this.navManager.NavigateTo($"/pressurelineheighoverknive/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}");
        }
    }

    int posId = 0;
    int lengthPosition;
    decimal correctedValue = 0.1m;
    private string bgOk = "";
    private string visible = "hidden";
    decimal[] correctedValues = new decimal[10];//0.1m;

    private string[] colorBgs = new string[4];//[tmp]"



    private void setPositionValue(int position)
    {


        for (int i = 0; i < colorBgs.GetLength(0); i++)
        {
            colorBgs[i] = "yellow";
            idOfElement[i] = "notselected";
        }

        colorBgs[position] = "greenyellow";
        idOfElement[position] = "selected";


    }

    private IList<Measurement> Model2;
    public string[] positionsAngle = new string[3];
    public string[] colors = new string[3];

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }

    [Parameter]
    public string pmachineIdd { get; set; }
    [Parameter]
    public string pshift { get; set; }


    protected async override Task OnInitializedAsync()
    {
        ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);
        lengthPosition = 50;
        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            positionsAngle[i] = "";

        }

        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        machine.Id = int.Parse(pmachineIdd);

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, machine.Id);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 9);

        for (int i = 0; i < idOfElement.GetLength(0); i++)
        {
            colorBgs[i] = "yellow";

            idOfElement[0] = "notSelected";
        }

        colorBgs[0] = "greenyellow";
        idOfElement[0] = "selected";
    }

    private IList<Machine> Machines;

    private void checkParams()
    {



        if (machine.Id == 0)
        {
            machine.Id = Machines.FirstOrDefault().Id;

        }

    }




    bool isSuccess = false;
    bool isPackCreated = false;
    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/measurementspeelingknivessettingoptions/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/measurementspeelingknivessettingoptions/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}");
            }
        }

    }





}
