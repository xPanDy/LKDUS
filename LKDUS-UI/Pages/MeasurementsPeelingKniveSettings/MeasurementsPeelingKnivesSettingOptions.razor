@page "/measurementspeelingknivessettingoptions/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}"
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@inject IMachinesRepository machineRepository;
@inject IMeasurementRepository repo
@inject NavigationManager navManager





<div class="card">
    <div class="container">
        <div class="row">
            <div class="col">
                <button type="button" @onclick="@Return" class="btn btn-primary  ">Atpakaļ</button>
            </div>

            @*<div class="col">
                    <button type="submit" class="btn btn-primary btn-block">Saglabāt</button>
                </div>*@

        </div><div class="row">
            <div class="col w-25"><h3 class="card-title">Lobnaža asināšana</h3></div>
        </div>
    </div>
    <div>
        <div class="row">
            <div class="col ">
                <button class="btn btn-warning btn-block" @onclick="@NavigatetoShaftHeight">
                    <h3>Lobnaža uzstādīšanas augstums attiecībā pret vārpstu, h, mm</h3>
                </button>
            </div>


            <div class="col">
                <button class="btn btn-warning btn-block" @onclick="@NavigatetoPressureLineHeight">
                    <h3>Spiedlīstes augstums virs naža, mm</h3>
                </button>
            </div>


             

            <div class="col">
                <button class="btn btn-warning btn-block" @onclick="@NavigatetoGap">
                    <h3>Sprauga starp lobnaža priekšējo virsmu un spiedlīsti, mm</h3>
                </button>
            </div>


             

        </div>

    </div>

</div>






@code {
    private IList<Measurement> Model2;

    [Parameter]
    public string pshift { get; set; }
    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }

    Machine machine = new Machine();

    protected async override Task OnInitializedAsync()
    {
        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        machine.Id = int.Parse(pmachineIdd);

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, machine.Id);
    }

    private IList<Machine> Machines;

    private void checkParams()
    {



        if (machine.Id == 0)
        {
            machine.Id = Machines.FirstOrDefault().Id;

        }
        if (stringPackValue == null)
        {
            stringPackValue = "0";
        }
    }


    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }


    private void Return(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurementspeelingknivessettings/{userId}/{measurementPositionId}/create");
    }


    private void NavigatetoShaftHeight(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/shaft/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/");
    }

    private void NavigatetoPressureLineHeight(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/pressurelineheigh/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/");
    }

    private void NavigatetoGap(MouseEventArgs e)
    {
        this.navManager.NavigateTo($"/pressurelineheighoverknive/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/");

    }
}
 
