@page "/centering/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}"
@*  *@
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using LKDUS_UI.Service
@using System.Globalization

@inject ToastService toastService
@inject IMachinesRepository machineRepository;
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime;
@inject IAuthenticationRepository authRepo

@inject IMeasurementTypeRepository measurementTypeRepository;
@inject IPacksRepository packRepo
<style>
    .grid-container {
        display: grid;
        height: 400px;
        align-content: center;
        grid-template-columns: 33% 33% 33%;
        grid-gap: 10px;
        background-color: white;
        padding: 10px;
        vertical-align: middle;
    }

    .none {
        background-color: rgba(255, 255, 255, 1);
        
        font-size: 30px;
        height: 100%;
        display: block;
        align-content: center;
        vertical-align: middle;
        display: inline-flex;
        align-items: center;
        text-align: center;
        width: 50%;
        margin: 0 auto;
    }
    /*.spn {
        vertical-align: middle;
        text-align: center;
        align-content: center;
        display: inline-flex;
        align-items: center;
    }
*/
    .up, .left, .down, .right {
       /* color: red;*/
        border: solid 4px red;
        font-size: 3em;
        text-align: center;
        height: 100px;
    }

        .up:hover, .left:hover, .down:hover, .right:hover {
           /* background-color: aqua;*/
            cursor: pointer;
            font-size: 3em;
            text-align: center;
        }
</style>
<div class="vh-100 m-0 p-0" style="overflow: hidden;">
    <div style="height: 100%;  width:100%; background-color: white ">
        <!--navigation -->
        <div class=" col-md-8 mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:10%; float:left; background-color: white">
            <button class="btn-primary btn btn-block" @onclick="@Return" style="width:100%; height:100%;"><h3>Atpakaļ</h3></button>
        </div>
        <div class=" col-md-8  mx-auto p-1 m-0  d-inline-block" style="width: 50%;height:10%; float:left;  background-color: white">
            <button class="btn-primary btn btn-block" @onclick="@SaveMeasurement" style="width:100%; height:100%;"><h3>Saglabāt</h3></button>
        </div>

        <div style=" margin: auto;
        width: 50%;
        padding: 10px;
        text-align: center;
">
            <h3>Centrēšana</h3>
        </div>

        <div class="row">


            <div class="col">

                <div class="grid-container">
                    <div class="none"></div>
                    <div style="        background-color: @colorBgs[0];" class="up" @onclick="el => setPositionValue(0)">@positionsAngle[0] </div>
                    <div class="none"></div>
                    <div style="        background-color: @colorBgs[1];" class="left" @onclick="el => setPositionValue(1)">@positionsAngle[1]</div>

                    <div class="none align-middle"><span class="spn" >
                        Kreisā puse</span></div>
                    <div style="        background-color: @colorBgs[2];" class="right" @onclick="el => setPositionValue(2)">@positionsAngle[2]</div>
                    <div class="none"></div>
                    <div style="        background-color: @colorBgs[3];" class="down" @onclick="el => setPositionValue(3)">@positionsAngle[3] </div>
                    <div class="none"> </div>
                </div>
            </div>


            <div class="col">

                <div class="grid-container">
                    <div class="none"></div>
                    <div style="        background-color: @colorBgs[4];" class="up" @onclick="el => setPositionValue(4)">@positionsAngle[4] </div>
                    <div class="none"></div>
                    <div style="        background-color: @colorBgs[5];" class="left" @onclick="el => setPositionValue(5)">@positionsAngle[5]</div>
                    <div class="none  align-middle"><span class="spn">Labā puse</span></div>
                    <div style="        background-color: @colorBgs[6];" class="right" @onclick="el => setPositionValue(6)">@positionsAngle[6]</div>
                    <div class="none"></div>
                    <div style="        background-color: @colorBgs[7];" class="down" @onclick="el => setPositionValue(7)"> @positionsAngle[7]</div>
                    <div class="none"> </div>
                </div>
            </div>



        </div>



        <!--con<div>t<>ent -->
        <!--<div class=" col-md-8   mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left; background-color: white">
            <div class="row-md-auto p-1 align-middle">
                <h5 style="text-align: left;">
                    <label for="@idOfElement[0]">Kreisā vārpsta:</label>
                </h5>
                <div>
                    <input id="@idOfElement[0]" readonly="readonly" style="        background-color: @colorBgs[0];
                    text-align: center;
                    font-size: 44px;
                    border: none;
                    height: 80px;
                    width: 100%" type="text" @bind-value="@positionsAngle[0]" @onclick="el => setPositionValue(0)" />
                </div>
            </div>
        </div>
        <div class="  col-md-8  mx-auto p-1 m-0 d-inline-block" style="width: 50%; height:55%; float:left;  background-color: white;">
            <h5 style="text-align: left;"><label for="@idOfElement[1]">Labā vārpsta:</label></h5>
            <div class="row-md-auto p-1 ">
                <input id="@idOfElement[1]" type="text" readonly="readonly" style="        background-color: @colorBgs[1];
                text-align: center;
                font-size: 44px;
                border: none;
                height: 80px;
                width: 100%" @bind-value="@positionsAngle[1]" @onclick="el => setPositionValue(1)" />
            </div>
        </div>-->
        <div class="table-responsive">
            <table class="table   p-0 m-0">
                <tbody>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-success  d-inline-block btn-lg btn-block" style="display:inline-block; width:100%; height:100%;" @onclick="e=>click('1')">1</button>
                        </td>
                        <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('2')">2</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('3')">3</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('-')">&lt;</button></td>
                    </tr>
                    <tr>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('4')">4</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('5')">5</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('6')">6</button></td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('7')">7</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('8')">8</button></td>
                        <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('9')">9</button></td>
                        @*<td rowspan="2"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click(',')">,</button></td>*@
                    </tr>
                    <tr>
                        <td colspan="3"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="e=>click('0')">0</button></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

</div>


@code {
    MeasurementType mt = new MeasurementType();
    Machine machine = new Machine();
    string[] idOfElement = new string[8];
    [Parameter]
    public string pshift { get; set; }

    string bindedValueOfActiveComponent = "";
    private void clickComma()
    {
        bindedValueOfActiveComponent = bindedValueOfActiveComponent + ",";


    }
    private void click(char valueToAdd)
    {



        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {

            if (positionsAngle[i] == "0")
            {
                positionsAngle[i] = "";
            }

            if (idOfElement[i] == "selected")
            {
                if (positionsAngle[i].Length >= 3 && valueToAdd != '-')
                {
                    return;
                }


                if (positionsAngle[i].Contains(',') && valueToAdd == ',')
                {
                    return;
                }

                //   if(positionsAngle[i].Contains(',')&& positionsAngle[i].Substring)

                if (positionsAngle[i].Contains(","))
                {
                    string afterComma = positionsAngle[i].Substring(positionsAngle[i].IndexOf(",") + 1);

                    if (valueToAdd == '-')
                    {
                        if (positionsAngle[i].Length == 0)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i].Remove(positionsAngle[i].Length - 1, 1);
                    }
                    else
                    {
                        if (afterComma.Length >= 2)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i] + valueToAdd;
                    }




                }
                else
                {
                    if (valueToAdd == '-')
                    {
                        if (positionsAngle[i].Length == 0)
                        {
                            break;
                        }
                        positionsAngle[i] = positionsAngle[i].Remove(positionsAngle[i].Length - 1, 1);
                    }
                    else
                    {

                        positionsAngle[i] = positionsAngle[i] + valueToAdd;
                    }

                }





            }
        }



        int v0;
        int v3;
        int v4;
        int v5;
        int v6;
        int v7;
        int v1;
        int v2;

        Int32.TryParse(positionsAngle[0], out v0);
        Int32.TryParse(positionsAngle[1], out v1);
        Int32.TryParse(positionsAngle[2], out v2);
        Int32.TryParse(positionsAngle[3], out v3);
        Int32.TryParse(positionsAngle[4], out v4);
        Int32.TryParse(positionsAngle[5], out v5);
        Int32.TryParse(positionsAngle[6], out v6);
        Int32.TryParse(positionsAngle[7], out v7);
        if (
            v0-v3 >=5
            || v3-v0 >= 5 ||

            v3 -v0
            <= -5 ||
            v0 -
            v3<= -5


            )
        {
            //colorBgs[0] = "red";
            //colorBgs[3] = "red";
        }
        else
        {

            //colorBgs[0] = "green";
            //colorBgs[3] = "green";
        }


    }



    private IList<Pack> ModelPacks;
    private async void SaveMeasurement()
    {
        String measurementDateAndTime = DateTime.Now.ToString("g");
        ////var pid = ModelPacks.Max(el => el.Id) + 1;
        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }

        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }

        IList<Measurement> measurementsToCreate = new List<Measurement>();
        Pack pack = new Pack();
        Machine machine = new Machine();

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        // pack.Machine =  machine.Name;
        pack.Machine = machine.Name;
        pack.Shift = shift;
        pack.Author = user.UserName;
        // pack.FusCode = stringPackValue;
        pack.MeasurementTypeName = mt.Name;
        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');
        
        Measurement meas = new Measurement();
        meas.DateCreated = DateTime.Parse(measurementDateAndTime);
        meas.Shift = shift;
        meas.UserId = userId;
        //   meas.MachineName = fusMachineName;
        meas.MeasurementPositionId = int.Parse(measurementPositionId);
        // meas.PackId = packId;
        meas.MeasurementTypeId = 1019;

        bool isConverted = false;
        decimal value = 0.00m;


        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            if (decimal.TryParse(positionsAngle[i].ToString(), out value))
            {
                isConverted = true;

                // success - can use kilometro
            }
            else
            {
                isConverted = false;
                break;
            }
        }

        if (isConverted)
        {
            //meas.Measurement1 = decimal.Parse(positionsAngle[0]);
            //meas.Measurement2 = decimal.Parse(positionsAngle[1]);
            meas.Measurement1 = Convert.ToDecimal(positionsAngle[0].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement2 = Convert.ToDecimal(positionsAngle[1].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement3 = Convert.ToDecimal(positionsAngle[2].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement4 = Convert.ToDecimal(positionsAngle[3].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement5 = Convert.ToDecimal(positionsAngle[4].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement6 = Convert.ToDecimal(positionsAngle[5].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement7 = Convert.ToDecimal(positionsAngle[6].Replace(",", "."), CultureInfo.InvariantCulture);
            meas.Measurement8 = Convert.ToDecimal(positionsAngle[7].Replace(",", "."), CultureInfo.InvariantCulture);

        }
        else
        {

            toastService.ShowToast("Lūdzu, aizpildiet visus laukus", ToastLevel.Error);
            return;
        }
        meas.FusPackId = 0;
        meas.PackId = int.Parse(elements[1]);// 0;







        isSuccess = await repo.Create(Endpoints.MeasurementEndpoint, meas);


        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;  // "/measurementspeelingknives/{userId}/{measurementPositionId}"
                                   //this.navManager.NavigateTo($"/measurementspeelingknives/{userId}/{measurementPositionId}");
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            //centeringlinechoise/{userId}/{measurementPositionId}/create
            ///centeringlinechoise/{userId}/{measurementPositionId}/create
            this.navManager.NavigateTo($"centeringlinechoise/{userId}/{measurementPositionId}/create");
        }
    }

    int posId = 0;
    int lengthPosition;
    decimal correctedValue = 0.1m;
    private string bgOk = "";
    private string visible = "hidden";
    decimal[] correctedValues = new decimal[10];//0.1m;

    private string[] colorBgs = new string[8];//[tmp]"



    private void setPositionValue(int position)
    {


        for (int i = 0; i < colorBgs.GetLength(0); i++)
        {
            colorBgs[i] = "white";
            idOfElement[i] = "notselected";
        }

        colorBgs[position] = "greenyellow";
        idOfElement[position] = "selected";


        int v0;
        int v3;
        int v4;
        int v5;
        int v6;
        int v7;
        int v1;
        int v2;

        Int32.TryParse(positionsAngle[0], out v0);
        Int32.TryParse(positionsAngle[1], out v1);
        Int32.TryParse(positionsAngle[2], out v2);
        Int32.TryParse(positionsAngle[3], out v3);
        Int32.TryParse(positionsAngle[4], out v4);
        Int32.TryParse(positionsAngle[5], out v5);
        Int32.TryParse(positionsAngle[6], out v6);
        Int32.TryParse(positionsAngle[7], out v7);
        if (
            v0 - v3 >= 5
            || v3 - v0 >= 5 ||

            v3 - v0
            <= -5 ||
            v0 -
            v3 <= -5


            )
        {
            // colorBgs[0] = "red";
            //   colorBgs[3] = "red";
        }
        else
        {

            // colorBgs[0] = "green";
            //  colorBgs[3] = "green";
        }


        if (
            v1 - v2 >= 5
            || v2 - v1 >= 5 ||

            v2 - v1
            <= -5 ||
            v1 -
            v2 <= -5


            )
        {
            // colorBgs[1] = "red";
            //  colorBgs[2] = "red";
        }
        else
        {

            // colorBgs[1] = "green";
            //  colorBgs[2] = "green";
        }

    }

    private IList<Measurement> Model2;
    public string[] positionsAngle = new string[8];
    public string[] colors = new string[2];

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }

    [Parameter]
    public string pmachineIdd { get; set; }



    protected async override Task OnInitializedAsync()
    {
        lengthPosition = 50;
        for (int i = 0; i < positionsAngle.GetLength(0); i++)
        {
            positionsAngle[i] = "";

        }
      //  ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);
        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        machine.Id = int.Parse(pmachineIdd);

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, machine.Id);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 1019);

        for (int i = 0; i < idOfElement.GetLength(0); i++)
        {
            colorBgs[i] = "white";

            idOfElement[0] = "notSelected";
        }

        colorBgs[0] = "greenyellow";
        idOfElement[0] = "selected";
    }
    private IList<Machine> Machines;

    private void checkParams()
    {



        if (machine.Id == 0)
        {
            machine.Id = Machines.FirstOrDefault().Id;

        }

    }


    //private void OpenCreateForm(MouseEventArgs e)
    //{

    //    this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    //}

    bool isSuccess = false;
    bool isPackCreated = false;
    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {                               ///centeringlinechoise/{userId}/{measurementPositionId}/create
            //this.navManager.NavigateTo($"/centeringlinechoise/{userId}/{measurementPositionId}/{pmachineIdd}/");
            this.navManager.NavigateTo($"/centeringlinechoise/{userId}/{measurementPositionId}/create");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/centeringlinechoise/{userId}/{measurementPositionId}/create");
            }
        }

    }





}
