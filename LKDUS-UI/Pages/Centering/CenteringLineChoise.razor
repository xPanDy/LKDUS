@page "/centeringlinechoise/{userId}/{measurementPositionId}/create"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using Microsoft.Extensions.Logging

@inject IAuthenticationRepository authRepo
@inject IMeasurementRepository repo
@inject IFusPacksRepository frepo
@inject IMeasurementTypeRepository measTRepo
@inject IMeasurementPositionsRepository measPositionRepo
@inject IMachinesRepository machineRepository

@inject NavigationManager navManager
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider datetime;
@inject ILogger<FusPack> Logger


<style>
    #row1 {
        padding: 20px 20px 20px 20px;
        overflow: hidden;
    }
    .button-left {
        background: url(../../Shared/back.png) left top;
    }
    .button-container {
        display: flex;
        /* displays flex-items (children) inline */
        justify-content: space-between;
        /* MDN: The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. */
        align-items: center;
        /* centers them vertically */
    }



    #back {
        background-color: #1b6ec2;
        color: white;
        padding: 25px;
        text-align: center;
    }

    #save {
        background-color: #1b6ec2;
        color: white;
        padding: 25px;
        text-align: center;
    }
</style>


<div id="row1">
    <div class="button-container">
        <span class="button-left" @onclick="@goBack">
            <h1><a id="back">Atpakaļ</a></h1>
        </span>
        <span>
            <h1>@mp.Name</h1>
        </span>
        <span style="visibility:hidden" class="button-right">
            <h1><a id="save">Saglabāt</a></h1>
        </span>
    </div>
</div>

<div>



    <!--<div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">@mp.Name</h3></div>
            <div class="col">-->
                @*<button type="submit" class="btn btn-primary btn-block">Saglabāt</button>*@
            <!--</div>


        </div>
    </div>-->








    <div class="form-group">
        <label for="example-datetime-local-input" class="col-2 col-form-label">Datums     <br /></label>
        <div class="row">
            <div class="col">
                @*// 01.12.2020 09:19:04*@
                <select disabled="true" class="custom-select" @bind="Day">
                    @for (int i = 1; i <= 31; i++)
                    {
                        <option>@i</option>
                    }
                </select>

            </div>


            <div class="col">
                <select disabled="true" class="custom-select" @bind="Month">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@Months[i - 1]</option>
                    }
                </select>

            </div>


            <div class="col">
                <select disabled="true" class="custom-select" @bind="Year">
                    @for (int i = DateTime.Now.Year - 5;
                      i <= DateTime.Now.Year + 5; i++)
                    {
                        <option>@i</option>
                    }
                </select>

            </div>

        </div>


    </div>




    @if (LaborantList == null)
    {
        <LoadingMessage Message="Notiek laborantu ielāde" />
    }
    else
    {
        <div class="form-group">
            <label for="operator">Laborants</label>
            <select disabled="true" class="custom-select" @bind=@defaultUser.UserName id="operator">


                @foreach (var usr in LaborantList)
                {

                    <option>@usr.UserName</option>
                }


            </select>

        </div>

    }
    <div class="form-group">
        <label for="shift">Maiņa</label>
        <select class="custom-select" @bind="pshift" id="shift">
            <option value="1">1</option>
            <option value="2">2</option>



        </select>

    </div>





</div>

<div class=" col-md-1 mx-auto ">


    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToCentering(2)) ">5.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToCentering(3)) ">6.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToCentering(4)) ">7.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToCentering(5)) ">8.Līnijas nazis</button></div>
    <div class="row p-1  "><button type="button" class="btn btn-primary p-2 m-6  " @onclick="(() => GoToCentering(6)) ">9.Līnijas nazis</button></div>








</div>


@code {
    public string bindUsername { get; set; }
    public int Day { get; set; }
    public int Month { get; set; }
    public int Year { get; set; }

    public string[] Months { get; set; } = {
        "Janvāris", "Februāris", "Marts",
       "Aprīlis", "Maijs", "Jūnijs", "Jūlijs",
       "Augusts", "Septembris", "Oktobris",
       "Novembris", "Decembris"  };



    public int pshift = 1;//{ get; set; }
    [Parameter]
    public int pmachineIdd { get; set; }
    [Parameter]
    public string userId { get; set; }


    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string packId { get; set; }
    [Parameter]
    public int pmeasurementTypeId { get; set; }

    public string stringPackValue
    {
        get;
        set;
    }

    string test = "";

    public string datums = "";
    public bool edited = false;

    //  public IList<FusPack> fusPacks;

    public IList<LoginModel> LaborantList;


    // public FusPack fp = new FusPack();
    Machine machine = new Machine();



    private void changeMachine()
    {

    }


    MeasurementPosition mp = new MeasurementPosition();

    protected async override void OnParametersSet()
    {
        //the param will be set now

    }

    private static DateTime today;
    private static string todayLocal = today.ToString("g");

    // public DateTime dateOfMeasurement { get; set; }
    // public string dateToday { get; set; }
    // public DateTime dateToday2 { get; set; }

    string currentLocalTime = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        if (firstRender)
        {
            var browserDateTime = await datetime.GetInstance();

            today = DateTime.Today;
            currentLocalTime = browserDateTime.Now.ToString();
            StateHasChanged();

            String measurementDateAndTime = DateTime.Now.ToString("g");
            DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

            DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

            DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);

            //String timeOfTheDayNow = DateTime.Now.ToString("t");


            if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
            {
                pshift = 1;
            }

            if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 || DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
            {
                pshift = 2;
            }

        }

    }



    private IList<Measurement> Model2;
    private IList<Measurement> FusMachines;
    private IList<Machine> Machines;
    public LoginModel defaultUser = new LoginModel();
    protected async override Task OnInitializedAsync()
    {

        Day = DateTime.Now.Day;
        Month = DateTime.Now.Month;
        Year = DateTime.Now.Year;

        LaborantList = await this.authRepo.Get(Endpoints.AspUsersEndpoint);

        defaultUser = LaborantList.Where(o => o.Id == userId).FirstOrDefault();

        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        FusMachines = await this.repo.Get(Endpoints.MeasurementEndpoint);

        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        try
        {
            int result = Int32.Parse(measurementPositionId);
            mp = await measPositionRepo.Get(Endpoints.MeasurementPositions, result);

        }

        catch (FormatException)
        {
            Console.WriteLine($"Unable to parse");
        }
        todayLocal = DateTime.Now.ToString("g");// today.ToString("g");
        pmachineIdd = machine.Id;
        if (pmachineIdd == 0)
        {
            pmachineIdd = Machines.FirstOrDefault().Id;
        }
        if (stringPackValue == null)
        {
            stringPackValue = "0";
        }
    }

    private void checkParams()
    {

        pmachineIdd = machine.Id;
        if (pmachineIdd == 0)
        {
            pmachineIdd = Machines.FirstOrDefault().Id;
        }
        if (stringPackValue == null)
        {
            stringPackValue = "0";
        }
    }



    private void GoToCentering(int line)
    {

        if (line == 2)
        {
            machine = Machines.Where(m => m.Name == "5.līnija").FirstOrDefault();
        }
        if (line == 3)
        {
            machine = Machines.Where(m => m.Name == "6.līnija").FirstOrDefault();
        }
        if (line == 4)
        {
            machine = Machines.Where(m => m.Name == "7.līnija").FirstOrDefault();
        }
        if (line == 5)
        {
            machine = Machines.Where(m => m.Name.Equals("8.līnija")).FirstOrDefault();
        }
        if (line == 6)
        {
            machine = Machines.Where(m => m.Name.Equals("9.līnija")).FirstOrDefault();
        }
        if (machine != null)
        {
            pmachineIdd = machine.Id;
            checkParams();

            //centering                              /{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}
            this.navManager.NavigateTo($"/centering/{userId}/{measurementPositionId}/{pmachineIdd}/{pshift}/");

        }

    }



    private void goBack(MouseEventArgs e)
    {
        ///measurementspeelingknivessettings/00c4acf0-fd20-4959-986d-818d7c40f9e7/5/
        this.navManager.NavigateTo($"/centering/{userId}/{measurementPositionId}/");
    }
}
