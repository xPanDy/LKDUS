@page "/measurements/{measurementPositionId}/create" 

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http

@inject IMeasurementRepository repo
@inject IMeasurementTypeRepository measTRepo
@inject IMeasurementPositionsRepository measPositionRepo

@inject NavigationManager navManager
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider datetime;




<form>

    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">Mitrā finiera pārbaude</h3></div>
            <div class="col">
                <button type="submit" class="btn btn-primary btn-block">Saglabāt</button>
            </div>
    

        </div>
    </div>

    <div class="form-group">
        <label for="machine">Iekārta</label>
        <select class="custom-select" id="machine">
            <option selected>Izvēlies...</option>
            <option value="1">Iekārta 1</option>
            <option value="2">Iekārta 2</option>
            <option value="3">Iekārta 3</option>
        </select>

    </div>


  
        <div class="form-group">

            <label for="example-datetime-local-input" class="col-2 col-form-label">Datums   <br /></label>
            @*// 01.12.2020 09:19:04*@
          
            <input class="form-control" type="date" value="2020-12-01" id="example-datetime-local-input">

        </div>
    



        <div class="form-group">
            <label for="example-text-input">Fus pakas kods</label>

            <input class="form-control" type="text" id="example-text-input">

        </div>


        <div class="form-group">
            <label for="operator">Operators</label>
            <select class="custom-select" id="operator">
                <option selected> Izvēlies...</option>
                <option value="1">Kristaps    </option>
                <option value="2">Linards    </option>
                <option value="3">Ieva       </option>
            </select>

        </div>


        <div class="form-group">
            <label for="shift">Maiņa</label>
            <select class="custom-select" id="shift">
                <option selected>Izvēlies...</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
            </select>

        </div>



        <div class="form-group">
            <label for="master">Meistars</label>
            <select class="custom-select" id="master">
                <option selected>Izvēlies...</option>
                <option value="1">Ieva</option>
                <option value="2">Linards</option>
                <option value="3">Kristaps</option>
            </select>

        </div>


        <nav class="navbar navbar-dark">
            <div class="container-fluid">
                <div class="navbar-btn">

                    <button type="button" @onclick="@GoToThickness" class="btn btn-primary">Mitrā finiera biezums</button>
                </div>
                <div class="navbar-btn">

                    <button type="button" @onclick="@GoToDimensions" class="btn btn-primary">Izmērs, platums, garums</button>
                </div> 
                <div class="navbar-btn">

                    <button type="button" @onclick="@GoToQuality" class="btn btn-primary">Kvalitāte</button>
                </div>

            </div>
        </nav>

</form>





 

@code {

    [Parameter]
    public string measurementPositionId { get; set; }




    private MeasurementPosition mpos = new MeasurementPosition();
    protected async override void OnParametersSet()
    {
        //the param will be set now
        try
        {
            int result = Int32.Parse(measurementPositionId);
            mpos = await measPositionRepo.Get(Endpoints.MeasurementPositions, result);

        }

        catch (FormatException)
        {
            Console.WriteLine($"Unable to parse");
        }
    }

    private static DateTime today = DateTime.Today ;
    private static string todayLocal = today.ToString("d");

    public DateTime DateOfBirth { get; set; }

    string currentLocalTime = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Remove the firstRender check if you want the current local time displayed to continuously update.
        {   // Leave the above firstRender check in place to ensure that the call to StateHasChanged() does not trigger an endless update loop.
            var browserDateTime = await datetime.GetInstance();
            currentLocalTime = browserDateTime. Now.ToString();
            StateHasChanged();
            DateOfBirth = DateTime.Now;
        }

    }
    private IList<Measurement> Model2;
    private IList<Measurement> Machines;


    protected async override Task OnInitializedAsync()
    {
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        Machines = await this.repo.Get(Endpoints.MeasurementEndpoint);
        todayLocal = today.ToString("d");
    }

    private void GoToThickness(MouseEventArgs e)
    {

        this.navManager.NavigateTo("/measurements/create/thickness");
    }

    private void GoToDimensions(MouseEventArgs e)
    {

        this.navManager.NavigateTo("/measurements/create/measurementdimensions");
    }

    private void GoToQuality(MouseEventArgs e)
    {

        this.navManager.NavigateTo("/measurements/create/quality");
    }

    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo("/measurements/create");
    }

    private void goBack(MouseEventArgs e)
    {
        this.navManager.NavigateTo($"/measurements/{measurementPositionId}");
    }
}
