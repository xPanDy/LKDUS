@page "/measurements/{measurementPositionId}/create"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using Microsoft.Extensions.Logging

@inject IMeasurementRepository repo
@inject IFusPacksRepository frepo
@inject IMeasurementTypeRepository measTRepo
@inject IMeasurementPositionsRepository measPositionRepo
@inject IMachinesRepository machineRepository

@inject NavigationManager navManager
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider datetime;
@inject ILogger<FusPack> Logger




<div>

    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">@mp.Name</h3></div>
            <div class="col">
                <button type="submit" class="btn btn-primary btn-block">Saglabāt</button>
            </div>


        </div>
    </div>




    <div class="form-group">
        @{
                <div class="row">


                            <div class="col">
                                <label for="packCode">Pakas kods</label>


                                @*@bind=@packId*@

                                <input class="form-control"
                                       @bind-value="@stringPackValue"
                                       @bind-value:event="oninput"
                                       @onkeyup="DoSomethingElse"
                                       type="text"
                                       id="packCode">
                                @if (fp == null)
                                {
                            <div class="alert alert-danger" role="alert">
                                Šāda paka neeksistē
                            </div>
                            
                                }

                            </div>
                    @if (fp != null)
                    {
                        <div class="col">

                            <label for="pack">Pakas Autors   </label>

                            <input class="form-control" readonly
                                   @bind="@fp.OperatorNameSurname"
                                   type="text" id="packAuthor">




                        </div>




                        <div class="col">
                            <label for="pack">Pakas datums</label>

                            <input class="form-control" type="text"
                                   @bind="@fp.DateCreated"
                                   readonly id="packDate">
                        </div>
                        <div class="col">
                            <label for="pack">Pakas iekārta</label>

                            <input class="form-control"
                                   @bind-value="@fp.MachineName" type="text" readonly id="packMachine">
                        </div>
                    }
                    else
                    {
                        <div class="col">

                            <label for="pack">Pakas Autors   </label>

                            <input class="form-control" readonly
                                    
                                   type="text" id="packAuthor">




                        </div>




                        <div class="col">
                            <label for="pack">Pakas datums</label>

                            <input class="form-control" type="text"
                                    
                                   readonly id="packDate">
                        </div>
                        <div class="col">
                            <label for="pack">Pakas iekārta</label>

                            <input class="form-control"
                                     type="text" readonly id="packMachine">
                        </div>
                    }

                </div>
        }
    </div>




    <div class="form-group">
        <label for="machine">Iekārta</label>
        <select class="custom-select" id="machine">
            <option selected>Izvēlies...</option>
            @if (Machines != null) { 
            @foreach (var Mach in Machines)
            {
                 
                <option  >@Mach.Name</option>
            }
            }
        </select>

    </div>



    <div class="form-group">
        <label for="example-datetime-local-input" class="col-2 col-form-label">Datums     <br /></label>
        <div class="row">
            <div class="col">
                @*// 01.12.2020 09:19:04*@
                <select class="custom-select" @bind="Day">
                    @for (int i = 1; i <= 31; i++)
                    {
                        <option>@i</option>
                    }
                </select>

            </div>


            <div class="col">
                <select class="custom-select" @bind="Month">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@Months[i - 1]</option>
                    }
                </select>

            </div>


            <div class="col">
                <select class="custom-select" @bind="Year">
                    @for (int i = DateTime.Now.Year - 5;
                        i <= DateTime.Now.Year + 5; i++)
                    {
                        <option>@i</option>
                    }
                </select>
                @*<button type="button">Izvēlēties</button>*@
            </div>
            @*<input class="form-control" type="text" @bind-value="@v" />*@
            @*<input class="form-control" type="date" bind-value="12/11/2020" id="example-datetime-local-input">*@
            @*<input class="form-control" type="date" value="2020-12-01" id="example-datetime-local-input">*@

        </div>

    
    </div>


    @*<div class="form-group">
        <label for="example-text-input">Fus pakas kods</label>

        <input class="form-control" type="text" id="example-text-input">

    </div>*@


    <div class="form-group">
        <label for="operator">Laborants</label>
        <select class="custom-select" id="operator">
            <option selected> Izvēlies...</option>
            <option value="1">Kristaps    </option>
            <option value="2">Linards    </option>
            <option value="3">Ieva       </option>
        </select>

    </div>


    <div class="form-group">
        <label for="shift">Maiņa</label>
        <select class="custom-select" id="shift">
            <option selected>Izvēlies...</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
        </select>

    </div>



    <div class="form-group">
        <label for="master">Meistars</label>
        <select class="custom-select" id="master">
            <option selected>Izvēlies...</option>
            <option value="1">Ieva</option>
            <option value="2">Linards</option>
            <option value="3">Kristaps</option>
        </select>

    </div>


    <nav class="navbar navbar-dark">
        <div class="container-fluid">
            <div class="navbar-btn">

                <button type="button" @onclick="@GoToThickness" class="btn btn-primary">Mitrā finiera biezums</button>
            </div>
            <div class="navbar-btn">

                <button type="button" @onclick="@GoToDimensions" class="btn btn-primary">Izmērs, platums, garums</button>
            </div>
            <div class="navbar-btn">

                <button type="button" @onclick="@GoToQuality" class="btn btn-primary">Kvalitāte</button>
            </div>

        </div>
    </nav> 

</div>





@code {

    public int Day { get; set; }
    public int Month { get; set; }
    public int Year { get; set; }

    public string[] Months { get; set; } = {
       "January", "February", "March",
       "April", "May", "June", "July",
       "August", "September", "October",
       "November", "December" };





    [Parameter]
    public string measurementPositionId { get; set; }


    public string stringPackValue
    {
        get;
        set;
    }

    string test = "";

    public string datums = "";
    public bool edited = false;

    public IList<FusPack> fusPacks;
    //public IList<Machine> macinesList;
    public FusPack fp = new FusPack();


    private void DoSomethingElse(KeyboardEventArgs e)
    {

        if (e.Code == "Enter")
        {

            try
            {
                int packid = int.Parse(stringPackValue);
                fp = fusPacks.Where(p => p.Id == packid).SingleOrDefault();

            }
            catch (Exception ex)
            {

                Logger.LogWarning(ex, "Failed to load fuspack {packid}", stringPackValue);
            }

        }
    }










    ////private void SetValue(string Value)
    ////{
    ////    value = Value;
    ////}
    //async void Enter(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter")
    //    {
    //        //packId = int.Parse(value2);

    //        //value = packId.ToString();
    //        try
    //        {
    //            int packid = int.Parse(stringValue);
    //            fp = await frepo.Get(Endpoints.FusPackEndPoint, packid);

    //        }
    //        catch (Exception)
    //        {

    //            throw;
    //        }
    //    }



    //}


    MeasurementPosition mp = new MeasurementPosition();

    protected async override void OnParametersSet()
    {
        //the param will be set now

    }

    private static DateTime today;
    private static string todayLocal = today.ToString("d");

    public DateTime dateOfMeasurement  { get; set; }
    public string dateToday { get; set; }
    public DateTime dateToday2 { get; set; }

    string currentLocalTime = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Remove the firstRender check if you want the current local time displayed to continuously update.
        {   // Leave the above firstRender check in place to ensure that the call to StateHasChanged() does not trigger an endless update loop.
            var browserDateTime = await datetime.GetInstance();
            // fusPacks = await frepo.Get(Endpoints.FusPackEndPoint);
            today = DateTime.Today;
            currentLocalTime = browserDateTime.Now.ToString();
            StateHasChanged();
            //dateToday = DateTime.Now.ToString("MM/dd/yyyy");
            //dateToday2 = DateTime.Parse(dateToday);

            //ToString("MM/dd/yyyy");
        }

    }



    private IList<Measurement> Model2;
    private IList<Measurement> FusMachines;
    private IList<Machine> Machines;

    protected async override Task OnInitializedAsync()
    {

        Day = DateTime.Now.Day;
        Month = DateTime.Now.Month;
        Year = DateTime.Now.Year;



        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        FusMachines = await this.repo.Get(Endpoints.MeasurementEndpoint);
        fusPacks = await frepo.Get(Endpoints.FusPackEndPoint);
        Machines = await machineRepository.Get(Endpoints.MachinesEndpoint);
        try
        {
            int result = Int32.Parse(measurementPositionId);
            mp = await measPositionRepo.Get(Endpoints.MeasurementPositions, result);

        }

        catch (FormatException)
        {
            Console.WriteLine($"Unable to parse");
        }
        todayLocal = today.ToString("d");
    }

    private void GoToThickness(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{measurementPositionId}/create/thickness");
    }

    private void GoToDimensions(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{measurementPositionId}/create/measurementdimensions");
    }

    private void GoToQuality(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{measurementPositionId}/create/quality");
    }

    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{measurementPositionId}/create");
    }

    private void goBack(MouseEventArgs e)
    {
        this.navManager.NavigateTo($"/measurements/{measurementPositionId}");
    }
}
