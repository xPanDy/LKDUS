@page "/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/measurementdimensions/length"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http

@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IMeasurementRepository measurementRepo







<div class="container">


    <div class="row">
        <div class="col">
            <button type="button" @onclick="@BacktochooseDimension" class="btn btn-primary btn-block">Atpakaļ</button>
        </div>
        <div class="col w-25"><h3 class="card-title">Mitrā finiera garums</h3></div>
        <div class="col">
            <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
        </div>

    </div>
</div>
<!--<div class="row w-100">

    <div class="col w-75">-->
<div class="container">

    <div class="row">

        <div class="col">

            <button type="button" style="background-color:@colorBg1" @onclick="changecolor1AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>4x8</h4>
                <br />
                <h5>(28<span sstyle="color:red">XX</span>)</h5>
            </button>

        </div>


        <div class="col w-25"></div>

        <div class="col">

            <button type="button" style="background-color:@colorBg2;" @onclick="changecolor2AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>8x4</h4>
                <br />
                <h5>(13<span sstyle="color:red">XX</span>)</h5>
            </button>


        </div>

        <div class="col w-25"></div>

        <div class="col">

            <button type="button" style="background-color:@colorBg3;" @onclick="changecolor3AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>4x4</h4>
                <br />
                <h5>(13<span sstyle="color:red">XX</span>)</h5>

            </button>

        </div>

    </div>
    <div class="row">
        <div class="col">
            <table class="table table-hover">

                <thead>


                    <tr>

                        <th rowspan="2">Nr.p.k.</th>
                        <th colspan="2">Lokšņu garums</th>

                    </tr>

                </thead>
                <tbody>

                    @for (int i = 0; i < positions.Length; i++)
                    {
                        int local = i;
                        int npk = i + 1;
                        <tr>
                            <td></td>
                            <td>@npk</td>

                            <td>


                                <select @bind="@positions[local]" class="w-auto custom-select">



                                    <option disabled="disabled">0</option>

                                    @for (int a = 0; a < sizes.Length; a++)
                                    {

                                        <option class="w-auto">@sizes[a]</option>


                                    }


                                </select>
                            </td>
                        </tr>
                    }


                </tbody>

            </table>
        </div>
    </div>




</div>



@code {
    private IList<Measurement> Model2;
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string userId { get; set; }
    public int[] positions = new int[10];



    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }


    protected async override Task OnInitializedAsync()
    {
        // Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = start;
            start = start + 1;
        }

        //for (int i = 0; i < positions.GetLength(0); i++)
        //{
        for (int j = 0; j < positions.Length; j++)
        {
            positions[j] = 0;
            //}
        }
    }


    public string colorBg1 = "white";
    public string colorBg2 = "white";
    public string colorBg3 = "white";

    int selecteSizeType = 0;
    private void changecolor1AndSetSizes()
    {
        selecteSizeType = 13;
        colorBg1 = "greenyellow";
        colorBg2 = "white";
        colorBg3 = "white";

    }
    private void changecolor2AndSetSizes()
    {
        selecteSizeType = 28;
        colorBg1 = "white";
        colorBg2 = "greenyellow";
        colorBg3 = "white";
    }
    private void changecolor3AndSetSizes()
    {
        selecteSizeType = 13;
        colorBg1 = "white";
        colorBg2 = "white";
        colorBg3 = "greenyellow";
    }
    private int actPos;

    private int[] sizes = new int[99];
    private int start = 1;

    private int selectedCellI = 0;
    private int selectedCellJ = 0;
    private int[] positionValues = new int[3];
    private int positionValue;


    private void select(int value)
    {
        positionValues[actPos] = value;
        // positions[selectedCellI, selectedCellJ] = value;


    }

    private void selectTableCell(int ii, int jj)
    {

        selectedCellI = ii;
        selectedCellJ = jj;
    }

    private void BacktochooseDimension(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/measurementdimensions");
    }


    private void Reduce(MouseEventArgs e)
    {
        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] - 10;
        }

    }


    private void Add(MouseEventArgs e)
    {
        //  Color = "black";

        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] + 10;
        }
    }



    private async void SaveMeasurement()
    {
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTime = Convert.ToDateTime("12:00:00");
        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);
        int packId = int.Parse(stringPackValue);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTime) >= 0)
        {
            shift = 2;
        }



        bool isSuccess = true;

        IList<Measurement> measurementsToCreate = new List<Measurement>();
        for (int j = 0; j < positions.Length; j++)
        {


            Measurement meas = new Measurement();
            meas.DateCreated = measurementDateAndTime;
            meas.Shift = shift;
            meas.MachineId = int.Parse(pmachineIdd); //machine.Id;
            meas.UserId = userId;
            meas.MeasurementPositionId = int.Parse(measurementPositionId);
            meas.PackId = packId;
            meas.MeasurementTypeId = 4;

            string newMeasSize = selecteSizeType.ToString();




            if (positions[j] == 0)
            {
                newMeasSize = newMeasSize + "00";
            }
            else if(positions[j] >0 && positions[j] < 10)
            {
                newMeasSize = newMeasSize + "0" + positions[j];
            }
            else
            {

                newMeasSize = newMeasSize + positions[j];
            }


            meas.Measurement1 = Convert.ToDecimal(newMeasSize);

            newMeasSize = "";


            measurementsToCreate.Add(meas);

            isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);
        }


    }

}
