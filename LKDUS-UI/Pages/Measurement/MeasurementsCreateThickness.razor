@page "/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/create/thickness"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http

@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IMachinesRepository machineRepository;
 @inject IMeasurementRepository measurementRepo;

<style>

    #ttr:focus {
        background-color: yellow;
    }

    .table-scroll {
        /*width:100%; */
        display: block;
        /* Decoration */
    }

        .table-scroll thead {
            background-color: #f1f1f1;
            position: relative;
            display: block;
            width: 100%;
        }

        .table-scroll tbody {
            /* Position */
            display: block;
            position: relative;
            width: 100%;
            overflow-y: scroll;
            /* Decoration */
        }

        .table-scroll tr {
            width: 100%;
            display: flex;
        }

        .table-scroll td, .table-scroll th {
            flex-basis: 100%;
            flex-grow: 2;
            display: block;
            padding: 5px;
            text-align: left;
        }

        /* Other options */

        .table-scroll.small-first-col td:first-child,
        .table-scroll.small-first-col th:first-child {
            flex-basis: 20%;
            flex-grow: 1;
        }

        .table-scroll tbody tr:nth-child(2n) {
            background-color: rgba(130,130,170,0.1);
        }

        .table-scroll tfoot {
            background-color: #f1f1f1;
            position: relative;
            display: block;
            width: 100%;
        }

    .body-half-screen {
        max-height: 35vh;
    }
</style>

<form>

    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@GoToCreation" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">Mitrā finiera biezums</h3></div>
            <div class="col">
                <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
            </div>
            

        </div>
    </div>
    <div class="form-group">
        <label for="machine">Iekārta</label>
        <input id="machine" class="form-control" type="text" placeholder=@mach.Name readonly>

    </div>
    <div class="form-group">

        <table class="table-scroll  ">
            <thead>
                <tr>
                    <th class="text-center">Nr.</th>
                    <th class="text-center">1  </th>
                    <th class="text-center">2  </th>
                    <th class="text-center">3  </th>
                </tr>
            </thead>
            <tbody class="body-half-screen">
                @if (sizesArray != null)
                {
                    for (int i = 0; i < sizesArray.GetLength(0); i++)
                    {

                        int tmp = i;
                        var rowNumber = i + 1;
                        //id="@tmp"
                        <tr tabindex="1" id="ttr" style="background-color: @Background" @onclick="( e => HighlightSelected1(tmp, Background))">

                            <td class="text-center" scope="row">@rowNumber</td>

                            @for (int j = 0; j < sizesArray.GetLength(1); j++)
                            {
                                <td   style="background-color: @highlight2"
                                    class="text-center">
                                    @sizesArray[i, j]
                                </td>


                            }
                        </tr>

                    }
                }


            </tbody>
            <tfoot>
                <tr>
                    <td></td>
                    <td class="text-center">
                        <button type="button" @onclick="(()=>setPos(0))" class="btn btn-primary alert-info">
                            <span class="badge badge-info">1.poz</span>
                            @*<br />
                                <span class="badge badge-light">
                                    @sizesArray[@actPosRow, @actPosCol]
                                    @rowPositionValues[0]

                                </span>*@
                        </button>
                    </td>
                    <td class="text-center">
                        <button type="button" @onclick="(()=>setPos(1))" class="btn btn-primary alert-info">
                            <span class="badge badge-info">2.poz</span>
                            @*<br />
                                <span class="badge badge-light">
                                @sizesArray[@actPosRow,@actPosCol]
                                @rowPositionValues[1]</span>*@
                        </button>
                    </td>
                    <td class="text-center">
                        <button type="button" @onclick="(()=>setPos(2))" class="btn btn-primary alert-info">
                            <span class="badge badge-info">3.poz</span>
                            @*<br />
                                <span class="badge badge-light">
                                @sizesArray[@actPosRow, @actPosCol]
                                @rowPositionValues[2]
                                </span>*@
                        </button>
                    </td>

                </tr>



            </tfoot>
        </table>
    </div>
     


    <div class="container">




    </div>





    <div class="container">

        <div class="d-flex justify-content-between">
            <button type="button" @onclick="Reduce" style="color:deeppink" class="btn btn-secondary btn-lg">-</button>
            <table class="table table-bordered table-bordered">
                <tbody>
                    <tr class="text-center">

                        <td>  <button type="button" @onclick="(()=>select(sizes[0]))" class="btn btn-info btn-lg btn-block">@sizes[0]</button></td>
                        <td><button type="button" @onclick="(()=>select(sizes[1]))" class="btn btn-info btn-lg btn-block">@sizes[1]</button></td>
                        <td><button type="button" @onclick="(()=>select(sizes[2]))" class="btn btn-info btn-lg btn-block">@sizes[2]</button></td>

                    </tr>
                    <tr class="text-center">
                        <td><button type="button" @onclick="(()=>select(sizes[3]))" class="btn btn-info btn-lg btn-block">@sizes[3]</button></td>
                        <td><button type="button" @onclick="(()=>select(sizes[4]))" class="btn btn-info btn-lg btn-block">@sizes[4]</button></td>
                        <td><button type="button" @onclick="(()=>select(sizes[5]))" class="btn btn-info btn-lg btn-block">@sizes[5]</button></td>
                    </tr>
                    <tr class="text-center">
                        <td><button type="button" @onclick="(()=>select(sizes[6]))" class="btn btn-info btn-lg btn-block">@sizes[6]</button></td>
                        <td><button type="button" @onclick="(()=>select(sizes[7]))" class="btn btn-info btn-lg btn-block">@sizes[7]</button></td>
                        <td><button type="button" @onclick="(()=>select(sizes[8]))" class="btn btn-info btn-lg btn-block">@sizes[8]</button></td>
                    </tr>
                </tbody>
            </table>
            <button type="button" style="color:lawngreen" @onclick="Add" class="btn btn-secondary btn-lg">+</button>
        </div>

    </div>





</form>


@code {

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }


    Machine machine = new Machine();




    private string Background { get; set; }

    private void HighlightSelected1(int i, string higlith)
    {
        int a = i;
        actPosRow = i;

    }



    private string highlight1 { get; set; } = "";
    private string highlight2 { get; set; } = "";
    private string highlight3 { get; set; } = "";
    private string highlight4 { get; set; } = "";

    private void select(decimal value)
    {

        sizesArray[actPosRow, actPosCol] = value; ;

    }

    private void setPos(int i)
    {

        // Color = Color == "red" ? "green" : "red";
        actPos = i;
        actPosCol = i;

        //actPosCol
    }

    private string Color { get; set; } = "red";
    private IList<Measurement> Model2;

    private int actPos;


    private int actPosCol;
    private int actPosRow;


    private decimal[] sizes = new decimal[9];

    private decimal[,] sizesArray = new decimal[40, 3];

    private decimal start = 1.51m;

    private decimal selectedValue;
    private decimal[] rowPositionValues = new decimal[3];
    private decimal positionValue;


    public List<decimal> range = new List<decimal>();

    int machineId;
    Machine mach = new Machine();

    protected async override Task OnInitializedAsync()
    {

        machineId = int.Parse(pmachineIdd);

        mach = await machineRepository.Get(Endpoints.MachinesEndpoint,   machineId);


        int startValuesOfMeasurement = 0;
        for (int i = 0; i < sizesArray.GetLength(0); i++)
        {

            for (int j = 0; j < sizesArray.GetLength(1); j++)
            {

                sizesArray[i, j] = startValuesOfMeasurement;
            }
        }

        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = start;
            start = start + 0.01m;
        }

    }


    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }

    private void GoToCreation(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }

    private async void SaveMeasurement()
    {
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTime = Convert.ToDateTime("12:00:00");
        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);
        int packId = int.Parse(stringPackValue);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if(DateTime.Compare(currentMeasurement,shiftTime) >= 0)
        {
            shift = 2;
        }



        bool isSuccess = true;

        IList<Measurement> measurementsToCreate = new List<Measurement>();

        for(int i = 0; i < sizesArray.GetLength(0); i++)
        {
            Measurement meas = new Measurement();
            meas.DateCreated = measurementDateAndTime;
            meas.Shift = shift;
            meas.MachineId = mach.Id;
            meas.UserId = userId;
            meas.MeasurementPositionId = int.Parse(measurementPositionId);
            meas.PackId = packId;
            meas.MeasurementTypeId = 1;
            for (int j = 0; j < sizesArray.GetLength(1); j++)
            {


                if (j == 0)
                {
                    meas.Measurement1 = sizesArray[i, j];
                }
                if (j == 1)
                {
                    meas.Measurement2 = sizesArray[i, j];
                }
                if (j == 2)
                {
                    meas.Measurement3 = sizesArray[i, j];
                }



            }
            measurementsToCreate.Add(meas);

            isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);
        }


    }





    private void Reduce(MouseEventArgs e)
    {
        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] - 0.01m;
        }

    }


    private void Add(MouseEventArgs e)
    {

        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] + 0.01m;
        }
    }


}
