@page "/growlong/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusMachineName}/{pshift}/create/measurementdimensions/width"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using LKDUS_UI.Service
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IMeasurementRepository measurementRepo
@inject IMachinesRepository machineRepository
@inject IAuthenticationRepository authRepo
@inject IPacksRepository packRepo
@inject IMeasurementTypeRepository measurementTypeRepository
@inject IJSRuntime JsRuntime
@inject ToastService toastService
<style>
    .button {
        width: 100%;
        height: 100%;
    }

    .btn-success:active {
        color: #ffffff !important;
        background-color: #161617;
        border-color: #494F57;
    }
</style>

<div class="container">

    <div class="container">
        <div class="row">
            <div class="col">
                <button type="button" @onclick="@Return" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">Platums</h3></div>
            <div class="col">
                <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="row">




            <div class="col w-25"></div>

            <div class="col">

                <button type="button" @onclick="e=>setdimension(28)" class="btn btn-outline-secondary btn-block">
                    <h4>4x9</h4>

                </button>


            </div>

            <div class="col w-25"></div>

            <div class="col">

                <button type="button" @onclick="e=>setdimension(29)" class="btn btn-outline-secondary btn-block">
                    <h4>4x10</h4>


                </button>

            </div>


            <div class="col w-25"></div>

            <div class="col">

                <button type="button" @onclick="e=>setdimension(30)" class="btn btn-outline-secondary btn-block">
                    <h4>4x10</h4>


                </button>

            </div>

        </div>






    </div>

    @if (isTypeCklicked)
    {<div class="col">
            <table class="table table-hover">

                <thead>


                    <tr>

                        <th>Nr.p.k.</th>
                        <th>1.mala</th>
                        <th>2.mala </th>
                        <th>Slīpums </th>



                    </tr>

                </thead>
                <tbody>

                    @for (int i = 0; i < positions.GetLength(0); i++)
                    {
                        int local = i;
                        int npk = i + 1;
                        var tmpI = i;
                        <tr style="line-height:10px;">
                            <td>@npk</td>


                            @for (int j = 0; j < positions.GetLength(1); j++)
                            {
                                var tmpJ = j;


                                if (j != 2 || j != 5 || j != 8)
                                {


                                    <td style="background-color:@elements[i, j];" id="@currentElement[i,j]"
                                        @onclick="( e => selectTableCell(tmpI,tmpJ))">
                                        @positions[i, j]
                                    </td>

                                }
                                else
                                {
                                    <td>
                                        @positions[i, j]
                                    </td>
                                }


                            }





                        </tr>
                    }


                </tbody>

            </table>
        </div>
        <div class="row justify-content-center">
            <div class="col-auto">
                <table class="table table-bordered justify-content-center">
                    <tbody>

                        <tr>
                            <td>
                                <button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select(   1))">
                                    1
                                </button>
                            </td>
                            <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select(    2))">2</button></td>
                            <td> <button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( 3))">3</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select(-1))">&lt;</button></td>
                        </tr>

                        <tr>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( 4))">4</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( 5))">5</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( 6))">6</button></td>
                            <td> </td>
                        </tr>

                        <tr>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onmouseup="(() => select( 7))">7</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onmouseup="(() => select( 8))">8</button></td>
                            <td><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( 9))">9</button></td>
                            <td rowspan="2"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( -2))">Go</button></td>
                        </tr>
                        <tr>
                            <td colspan="3"><button type="button" class="btn btn-success btn-lg btn-block" @onclick="(() => select( 0))">0</button></td>

                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col">




            </div>
        </div>
        }


    else
    {
        <LoadingMessage Message="Izvēlies izmēru lai sāktu mērījumu"></LoadingMessage>
    }













</div>




@code {

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }
    [Parameter]
    public string fusMachineName { get; set; }
    [Parameter]
    public string pshift { get; set; }
    private IList<Measurement> Model2;


    private string[,] currentElement = new string[10, 3];
    protected async override Task OnInitializedAsync()
    {
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);
        for (int i = 0; i < positions.GetLength(0); i++)
        {
            for (int j = 0; j < positions.GetLength(1); j++)
            {
                positions[i, j] = "";
            }
        }
        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = start;
            start = start + 1;
        }

        for (int i = 0; i < elements.GetLength(0); i++)
        {

            for (int j = 0; j < elements.GetLength(1); j++)
            {
                elements[i, j] = "";
            }
        }
        elements[0, 0] = "red";

        for (int i = 0; i < currentElement.GetLength(0); i++)
        {

            for (int j = 0; j < currentElement.GetLength(1); j++)
            {

                currentElement[i, j] = "current" + i + j;
            }
        }
        activePosition = "current00";
    }


    private int actPos;

    private int[] sizes = new int[11];
    private int start = 0;

    private int selectedCellI = 0;
    private int selectedCellJ = 0;
    private int[] positionValues = new int[3];
    private int positionValue;
    private string activePosition = "";



    private string[,] elements = new string[10, 3];

    int column = 0;


    private int dimenstionid = 0;
    public bool isTypeCklicked = false;
    private void setdimension(int dimensionId)
    {
        dimenstionid = dimensionId;
        isTypeCklicked = true;
    }


    private void select(int value)
    {
        if (value == -2)
        {
            if (selectedCellI <= 10 && selectedCellJ < 1)
            {
                elements[selectedCellI, selectedCellJ] = "";
                selectedCellI++;

                //šeit
                if (selectedCellI == 10)
                {
                    selectedCellI = 0;



                    selectedCellJ = selectedCellJ + 1;
                }
                elements[selectedCellI, selectedCellJ] = "yellow";

                return;

                elements[selectedCellI, selectedCellJ] = "yellow";

            }
            if (selectedCellI <= 10 && selectedCellJ == 1)
            {

                elements[selectedCellI, selectedCellJ] = "";
                selectedCellI++;


                if (selectedCellI == 10)
                {
                    selectedCellI = 0;
                    selectedCellJ = 0;
                    elements[selectedCellI, selectedCellJ] = "yellow";

                    return;
                }
                elements[selectedCellI, selectedCellJ] = "yellow";


            }




        }

        else if (value == -1)
        {
            if (positions[selectedCellI, selectedCellJ].Length > 0)
            {

                positions[selectedCellI, selectedCellJ] =
                    positions[selectedCellI, selectedCellJ].Remove(positions[selectedCellI, selectedCellJ].Length - 1, 1);

                if (positions[selectedCellI, 0] != "" || positions[selectedCellI, 1] != null)
                {
                    //  positions[selectedCellI, 2] = Math.Abs(Convert.ToDecimal(positions[selectedCellI, 1]) - Convert.ToDecimal(positions[selectedCellI, 0])) + "";

                    decimal value1;
                    Decimal.TryParse(positions[selectedCellI, 1], out value1);

                    decimal value0;
                    Decimal.TryParse(positions[selectedCellI, 0], out value0);


                    decimal result = value1 - value0;
                    result = Math.Abs(result);
                    positions[selectedCellI, 2] = result.ToString();

                }

            }
        }
        if (value >= 0)
        {
            if (positions[selectedCellI, selectedCellJ].Length < 4)
            {
                positions[selectedCellI, selectedCellJ] = positions[selectedCellI, selectedCellJ] + value.ToString();


                if (positions[selectedCellI, 0] != "" || positions[selectedCellI, 1] != null)
                {
                    decimal value1;
                    Decimal.TryParse(positions[selectedCellI, 1], out value1);

                    decimal value0;
                    Decimal.TryParse(positions[selectedCellI, 0], out value0);


                    decimal result = value1 - value0;
                    result = Math.Abs(result);
                    positions[selectedCellI, 2] = result.ToString();

                }

            }


        }



    }

    private ElementReference input1;
    [Inject] IJSRuntime JSRuntime { get; set; }

    private ElementReference input2;
    private ElementReference input3;
    private ElementReference input4;
    private string id1 = "inactive";
    private string id2 = "inactive";
    private string id3 = "inactive";
    private string id4 = "inactive";

    private string[,] positions = new string[10, 3];
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        //if (firstRender)
        //{
        //    id1 = "code";
        //    await
        //    JSRuntime.InvokeVoidAsync("exampleJsFunctions.focusElement", input1);
        //}

    }
    int lastRow1;
    int lastRow2;
    string colorBg1;
    string colorBg2;
    private void SetFlow(int i)
    {
        if (i == 0)
        {
            colorBg1 = "greenyellow";
            colorBg2 = "green";

        }
        else if (i == 1)
        {
            colorBg2 = "greenyellow";
            colorBg1 = "green";
        }


        for (int ii = 0; ii < currentElement.GetLength(0); ii++)
        {
            for (int jj = 0; jj < currentElement.GetLength(1); jj++)
            {
                elements[ii, jj] = "";
            }
        }
        column = i;


        for (int k = 0; k < currentElement.GetLength(0); k++)
        {
            for (int j = 0; j < currentElement.GetLength(1); j++)
            {

                if (positions[k, column] == "")
                {

                    selectedCellI = k;
                    //elements[selectedCellI, selectedCellJ] = "";
                    selectedCellJ = column;
                    activePosition = "current" + selectedCellI + selectedCellJ;//activePosition;
                                                                               //  activePosition = activePosition.Remove(activePosition.Length - 1, 1) + "" + column;
                    elements[selectedCellI, column] = "red";

                    return;
                }
            }
        }


        /* for (int k = 0; k < currentElement.GetLength(0); k++)
         {

             for (int j = 0; j < currentElement.GetLength(1); j++)
             {
                 if (currentElement[k, j] == activePosition)
                 {


                     selectedCellI = k;
                     elements[selectedCellI, selectedCellJ] = "";
                     selectedCellJ = column;



                     string act = activePosition;
                     activePosition = activePosition.Remove(activePosition.Length - 1, 1) + "" + column;
                     elements[selectedCellI, selectedCellJ] = "red";
                     return;
                 }
             }
         }*/

    }
    bool isEdit = false;
    string editPosition = "";
    private void selectTableCell(int ii, int jj)
    {
        isEdit = true;

        for (int i = 0; i < elements.GetLength(0); i++)
        {

            for (int j = 0; j < elements.GetLength(1); j++)
            {
                if (i == ii && j == jj)
                {
                    elements[i, j] = "yellow";
                    editPosition = "current" + i + j;

                }
                else
                {
                    elements[i, j] = "";
                }
            }
            //if (currentElement[i,j] == activePosition)
            //  {
            //      activePosition = "current" + i + j;
            //      elements[i, j] = "red";
            //      break;
            //  }

        }

        selectedCellI = ii;
        selectedCellJ = jj;
    }



    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/growlong/{userId}/{measurementPositionId}/create");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>
    ("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/growlong/{userId}/{measurementPositionId}/create");
            }
        }
        //   this.navManager.NavigateTo($"/measurementspeeling/{userId}/{measurementPositionId}/create");
    }

    bool isSuccess = false;
    bool isPackCreated = false;
    MeasurementType mt = new MeasurementType();

    private IList<Pack>
        ModelPacks;
    private async void SaveMeasurement()
    {
        int packId = int.Parse(stringPackValue);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 1014);
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);


        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }
        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }
        //var pid = ModelPacks.Max(el => el.Id) + 1;

        IList<Measurement>
            measurementsToCreate = new List<Measurement>
                ();
        Pack pack = new Pack();
        Machine machine = new Machine();
        // machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        pack.MeasurementTypeName = mt.Name;


        pack.Machine = fusMachineName;
        //pack.Machine = "Plūsmas";
        pack.FusCode = stringPackValue;

        pack.Shift = shift;
        pack.Author = user.UserName;
        pack.DimensionId = dimenstionid;
        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');






        //   isPackCreated = await packRepo.Create(Endpoints.PacksEndpoint, pack);
        for (int i = 0; i < positions.GetLength(0); i++)
        {

            Measurement meas = new Measurement();
            meas.DateCreated = DateTime.Parse(measurementDateAndTime);
            // var packId = ModelPacks. Max(el => el.Id) + 1;
            meas.Shift = shift;
            // meas.MachineName = int.Parse(pmachineIdd); //machine.Id;
            meas.UserId = userId;
            meas.MeasurementPositionId = int.Parse(measurementPositionId);
            meas.FusPackId = packId;
            meas.MeasurementTypeId = 1014
            ;
            meas.MachineName = fusMachineName;
            meas.PackId = int.Parse(elements[1]);



            for (int j = 0; j < positions.GetLength(1); j++)
            {



                if (j == 0)
                {

                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement1 = Convert.ToDecimal(positions[i, j]);
                }
                if (j == 1)
                {
                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement2 = Convert.ToDecimal(positions[i, j]);
                }

                if (j == 2)
                {
                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement3 = Convert.ToDecimal(positions[i, j]);
                }

                if (j == 3)
                {
                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement4 = Convert.ToDecimal(positions[i, j]);
                }
                if (j == 4)
                {
                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement5 = Convert.ToDecimal(positions[i, j]);
                }
                if (j == 6)
                {
                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement7 = Convert.ToDecimal(positions[i, j]);
                }
                if (j == 5)
                {
                    if (positions[i, j] == "")
                    {
                        positions[i, j] = "0";
                    }
                    meas.Measurement6 = Convert.ToDecimal(positions[i, j]);
                }
            }







            measurementsToCreate.Add(meas);

            isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);
        }



        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            this.navManager.NavigateTo($"/growlong/{userId}/{measurementPositionId}/create");
        }
    }
}













