@page "/sorting/{fusCode}/{measurementPositionId}/{userId}/{packId}/{measurementTypeName}/view"
@*measurements/{fusCode}/{measurementPositionId}/{userId}/{packId}/view*@
@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http

@inject IMeasurementRepository measurementRepository
@inject IMeasurementTypeRepository measurementTypeRepository
@inject IPacksRepository packsRepository
@inject NavigationManager navManager
@inject IMeasurementPositionsRepository measurementPositionRepo
@inject IDefectRepository defectRepo
@inject IClasssRepository classRepo
<style>
    .rowcentered {
        margin: auto;
        max-width: 300px;
    }
</style>

<div style="height:100%">
    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col">
            </div>
            <div class="col">
            </div>
        </div>
    </div>





    @if (ModelPackHeader == null)
    {
        <LoadingMessage Message="Notiek mērījumu ielāde" />
    }
    else
    {

        <!-- Scroll bar present and enabled when more contents -->


        <div class="rowcentered">
            <h4> Dati par pakas:@ModelPackHeader.FusCode  @ModelPackHeader.MeasurementTypeName mērījumiem </h4>
        </div>


        <div class="container" style="height:75%">
            <div class="mh-75">
                <table class="table">
                    <thead>
                        <tr style=" text-align: right;"></tr>
                        <tr>

                            <th scope="col">Datums              </th>
                            <th scope="col">Iekārta               </th>
                            <th scope="col">Maiņa             </th>
                            <th scope="col">Šķira             </th>
                            @foreach (var element in DefectList)
                            {
                                <th scope="col"> @element.Name </th>
                            }

                            @*<th scope="col">Rādītājs 1 </th>
                                <th scope="col">Rādītājs 2</th>
                                <th scope="col">Rādītājs 3</th>
                                <th scope="col">Rādītājs 4 </th>
                                <th scope="col">Rādītājs 5</th>
                                <th scope="col">Rādītājs 6</th>
                                <th scope="col">Rādītājs 7 </th>
                                <th scope="col">Rādītājs 8</th>
                                <th scope="col">Rādītājs 9</th>
                                <th scope="col">Rādītājs 10 </th>

                                <th scope="col">Rādītājs 11 </th>
                                <th scope="col">Rādītājs 12</th>
                                <th scope="col">Rādītājs 13</th>
                                <th scope="col">Rādītājs 14 </th>
                                <th scope="col">Rādītājs 15</th>
                                <th scope="col">Rādītājs 16</th>
                                <th scope="col">Rādītājs 17 </th>
                                <th scope="col">Rādītājs 18</th>
                                <th scope="col">Rādītājs 19</th>
                                <th scope="col">Rādītājs 20 </th>

                                <th scope="col">Rādītājs 21 </th>
                                <th scope="col">Rādītājs 22</th>
                                <th scope="col">Rādītājs 23</th>
                                <th scope="col">Rādītājs 24 </th>
                                <th scope="col">Rādītājs 25</th>
                                <th scope="col">Rādītājs 26</th>
                                <th scope="col">Rādītājs 27 </th>
                                <th scope="col">Rādītājs 28</th>
                                <th scope="col">Rādītājs 29</th>
                                <th scope="col">Rādītājs 30 </th>

                                <th scope="col">Rādītājs 31 </th>
                                <th scope="col">Rādītājs 32</th>
                                <th scope="col">Rādītājs 33</th>*@

                            @*<th scope="col">Meistars</th>*@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var model in ModelMeasurements)
                        {

                            <tr>

                                <td>@model.DateCreated</td>
                                <td>@ModelPackHeader.Machine</td>
                                <td>@model.Shift</td>

                                @foreach (var element in ClassList)
                                {
                                    if (element.Id == model.ClassId)
                                    {
                                        <td>@element.ClassName</td>
                                        break;
                                    }

                                }


                                <td>@model.Measurement1</td>
                                <td>@model.Measurement2</td>
                                <td>@model.Measurement3</td>
                                <td>@model.Measurement4</td>
                                <td>@model.Measurement5</td>
                                <td>@model.Measurement6</td>
                                <td>@model.Measurement7</td>
                                <td>@model.Measurement8</td>
                                <td>@model.Measurement9</td>
                                <td>@model.Measurement10</td>

                                <td>@model.Measurement11</td>
                                <td>@model.Measurement12</td>
                                <td>@model.Measurement13</td>
                                <td>@model.Measurement14</td>
                                <td>@model.Measurement15</td>
                                <td>@model.Measurement16</td>
                                <td>@model.Measurement17</td>
                                <td>@model.Measurement18</td>
                                <td>@model.Measurement19</td>
                                <td>@model.Measurement20</td>

                                <td>@model.Measurement21</td>
                                <td>@model.Measurement22</td>
                                <td>@model.Measurement23</td>
                                <td>@model.Measurement24</td>
                                <td>@model.Measurement25</td>
                                <td>@model.Measurement26</td>
                                <td>@model.Measurement27</td>
                                <td>@model.Measurement28</td>
                                <td>@model.Measurement29</td>
                                <td>@model.Measurement30</td>

                                <td>@model.Measurement31</td>
                                <td>@model.Measurement32</td>
                                <td>@model.Measurement33</td>




                            </tr>

                        }


                    </tbody>
                </table>
            </div>



        </div>




    }
</div>
@code {
    private IList<Defect> DefectList = new List<Defect>();
    private IList<Classs> ClassList = new List<Classs>();
    [Parameter]
    public string fusCode { get; set; }
    [Parameter]
    public string measurementTypeName { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }

    [Parameter]
    public string packId { get; set; }

    [Parameter]
    public string userId { get; set; }

    //private IList<Measurement> Model;
    private Pack ModelPackHeader;


    private IList<Measurement> ModelMeasurements;


    private MeasurementPosition measurementPosition;
    private IList<MeasurementType> measurementTypelIST;
    private MeasurementType measurementType;

    protected async override Task OnInitializedAsync()
    {
        int packIdInt = 0;
        int fuspackIntId = 0;
        if (fusCode != "0")
        {
            try
            {
                fuspackIntId = int.Parse(fusCode);
                packIdInt = int.Parse(packId);
                ModelPackHeader = await packsRepository.Get(Endpoints.PacksEndpoint, packIdInt);
                measurementTypelIST = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint);
                measurementType = measurementTypelIST.Where(e => e.Name == measurementTypeName).SingleOrDefault();
                DefectList = await defectRepo.Get(Endpoints.DefectsEndpoint);
                ClassList = await classRepo.Get(Endpoints.ClasssEndpoint);
                //ModelPackHeader = ModelPackHeader.Where(ph=> ph. packIdInt);
                //   Model = await machineRepo.Get(Endpoints.MachinesEndpoint, id);
            }
            catch (Exception)
            {

                Console.WriteLine($"Unable to parse");

            }


        }


        ModelMeasurements = await measurementRepository.Get(Endpoints.MeasurementEndpoint);
        //ModelPacksHeader = ModelPacksHeader.Where(p=>p.FusCode==fusCode)..ToList() ;

        ModelMeasurements = ModelMeasurements.Where(m => m.PackId == packIdInt).ToList();
        foreach (var el in ModelMeasurements)
        {
            el.DateCreated.ToString("dd.MM.yyyy HH:mm:ss");
        }
        //   ModelMeasurements = ModelMeasurements.Where(m => m.FusPackId == fuspackIntId && m.MeasurementTypeId == measurementType.Id).ToList();
        // Model = Model.Where(e => (e.MeasurementPositionId == 1)).ToList();


    }



    private void goBack(MouseEventArgs e)
    {
        // this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}");
        this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}");
    }
}
