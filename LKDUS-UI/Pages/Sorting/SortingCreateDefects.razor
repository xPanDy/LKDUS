@page "/sorting/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusMachineName}/{pshift}/create/defects"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using LKDUS_UI.Service
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IMeasurementRepository measurementRepo
@inject IMachinesRepository machineRepository
@inject IAuthenticationRepository authRepo
@inject IClasssRepository classRepo
@inject IDefectRepository defectRepo

@inject IPacksRepository packRepo
@inject IMeasurementTypeRepository measurementTypeRepository
@inject IJSRuntime JsRuntime
@inject ToastService toastService
<style>
    .button {
        width: 100%;
        height: 100%;
    }

    .btn-success:active {
        color: #ffffff !important;
        background-color: #161617;
        border-color: #494F57;
    }
    td {
        word-wrap: break-word;
    }

    .nonono {
        white-space: nowrap;
        overflow: hidden;
    }

    h4 {
        padding-left:5px;
        padding-right:5px;
    }
</style>



<div class="container">
    <div class="row">
        <div class="col">
            <button type="button" @onclick="@Return" class="btn btn-primary btn-block">Atpakaļ</button>
        </div>
        <div class="col w-25"><h3 style="text-align: center; " class="card-title">Defekti</h3></div>
        <div class="col">
            <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
        </div>

    </div>
</div>
<div class="container">

    <div class="row">

        @*<div class="col">

                <button type="button" style="background-color:@colorBgP1" @onclick=" " class="btn btn-outline-secondary btn-block">
                    <h4>4 pēdas</h4>

                </button>

            </div>*@




    </div>
    @if (isTypeCklicked && DefectList != null)
    {

        <div class="row">
            <div class="col">
                <table style="table-layout: fixed; width: 100%">
                    <thead>

                    </thead>
                    <tbody>
                        @for (int i = 0; i < 11; i++)
                        {
                            int tmp = i;
                            <tr>
                                <td>
                                    <h4>@DefectList[i].Name</h4>
                                </td>
                                <td>
                                    <div class="row">
                                        <div type="button" @onclick="e=>select(tmp,+1)" class="btn btn-success btn-lg  ">+</div>
                                        <h3    >@positions[tmp]</h3>
                                        <button type="button" @onclick="e=>select(tmp,-1)"
                                             disabled="@isDisabledMinus[tmp]" class="btn btn-danger btn-lg">-</button>
                                    </div>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>

            </div>
            <div class="col">
                <table style="table-layout: fixed; width: 100%">
                    <thead>

                    </thead>
                    <tbody>

                        @for (int i = 11; i < 22; i++)

                        {
                            int tmp = i;
                            <tr>
                                <td>
                                    <h4>@DefectList[tmp].Name</h4>
                                </td>
                                <td>
                                    <div class="row">
                                        <div type="button" @onclick="e=>select(tmp,+1)" class="btn btn-success btn-lg  ">+</div>
                                        <h3 readonly>@positions[tmp]</h3>
                                        <button type="button" @onclick="e=>select(tmp,-1)"
                                             disabled="@isDisabledMinus[tmp]" class="btn btn-danger btn-lg">-</button>
                                    </div>
                                </td>
                            </tr>

                        }


                    </tbody>
                </table>
            </div>
            <div class="col">
                <table style="table-layout: fixed; width: 100%">
                    <thead>

                    </thead>
                    <tbody>
                        @for (int i =  23; i <33  ; i++)

                        {
                            int tmp = i;
                            <tr>
                                <td>
                                    <h4>@DefectList[tmp].Name</h4>
                                </td>
                                <td>
                                    <div class="row">
                                        <div type="button" @onclick="e=>select(tmp,+1)" class="btn btn-success btn-lg  ">+</div>
                                        <h3 readonly>@positions[tmp]</h3>
                                        <button type="button" @onclick="e=>select(tmp,-1)"
                                             disabled="@isDisabledMinus[tmp]" class="btn btn-danger btn-lg">-</button>
                                    </div>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
            </div>
        </div>



        








    }
    else
    {
        <LoadingMessage Message="Izvēlies izmēru lai sāktu mērījumu"></LoadingMessage>
    }







</div>




@code {
    int selecteSizeType = 0;



    public string colorBgP1 = "white";
    public string colorBgP2 = "white";
    public string colorBgP3 = "white";
    public string colorBgP4 = "white";
    public string colorBgP5 = "white";
    public string colorBgP6 = "white";
    public string colorBgP7 = "white";
    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }
    [Parameter]
    public string fusMachineName { get; set; }
    [Parameter]
    public string pshift { get; set; }
    private IList<Measurement> Model2;

    public bool isTypeCklicked = true;

    private string[,] currentElement = new string[10, 2];
    protected async override Task OnInitializedAsync()
    {
        Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);





    }




    bool[] isDisabledMinus = new bool[33];



    private void select(int index, int valuetoadd)
    {

        for (int i = 0; i < positions.Length; i++)
        {
            if (i == index)
            {
                positions[index] = positions[index] + valuetoadd;
                if (positions[index] == 0)
                {
                    isDisabledMinus[index] = true;

                    return;

                }else
                {
                    isDisabledMinus[index] = false;
                    return;
                }
            }
        }

    }

    private ElementReference input1;
    [Inject] IJSRuntime JSRuntime { get; set; }



    private int[] positions = new int[33];
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            DefectList =   await defectRepo.Get(Endpoints.DefectsEndpoint);
            ClassList =   await classRepo.Get(Endpoints.ClasssEndpoint);
            for (int i = 0; i < positions.GetLength(0); i++)
            {

                positions[i] = 0;
                isDisabledMinus[i] = true;
            }
        }

    }
    int lastRow1;
    int lastRow2;
    string colorBg1;
    string colorBg2;






    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}/create");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}/create");
            }
        }

    }

    bool isSuccess = false;
    bool isPackCreated = false;
    MeasurementType mt = new MeasurementType();

    private IList<Defect> DefectList;
    private IList<Classs> ClassList;
    private IList<Pack> ModelPacks;
    private async void SaveMeasurement()
    {
        int packId = int.Parse(stringPackValue);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 1021);
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);


        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }
        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }
        //var pid = ModelPacks.Max(el => el.Id) + 1;

        IList<Measurement> measurementsToCreate = new List<Measurement>();
        Pack pack = new Pack();
        Machine machine = new Machine();
        // machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        pack.MeasurementTypeName = mt.Name;
        pack.DimensionId = selecteSizeType;

        pack.Machine = fusMachineName;
        //   pack.Machine = "Plūsmas";

        pack.FusCode = stringPackValue;
        pack.Shift = shift;
        pack.Author = user.UserName;

        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');






        //   isPackCreated = await packRepo.Create(Endpoints.PacksEndpoint, pack);


        Measurement meas = new Measurement();
        meas.DateCreated = DateTime.Parse(measurementDateAndTime);
        // var packId = ModelPacks. Max(el => el.Id) + 1;
        meas.Shift = shift;
        // meas.MachineName = int.Parse(pmachineIdd); //machine.Id;'
        meas.MachineName = fusMachineName;

        meas.UserId = userId;
        meas.MeasurementPositionId = int.Parse(measurementPositionId);
        meas.FusPackId = packId;
        meas.MeasurementTypeId = 1021;
        ;
        meas.PackId = int.Parse(elements[1]);
        meas.DefectId = null;
        meas.Measurement1 = Convert.ToDecimal(positions[0]);
        meas.Measurement2 = Convert.ToDecimal(positions[1]);
        meas.Measurement3 = Convert.ToDecimal(positions[2]);
        meas.Measurement4 = Convert.ToDecimal(positions[3]);
        meas.Measurement5 = Convert.ToDecimal(positions[4]);
        meas.Measurement6 = Convert.ToDecimal(positions[5]);
        meas.Measurement7 = Convert.ToDecimal(positions[6]);
        meas.Measurement8 = Convert.ToDecimal(positions[7]);
        meas.Measurement9 = Convert.ToDecimal(positions[8]);
        meas.Measurement10 = Convert.ToDecimal(positions[9]);

        meas.Measurement11 = Convert.ToDecimal(positions[10]);
        meas.Measurement12 = Convert.ToDecimal(positions[11]);
        meas.Measurement13 = Convert.ToDecimal(positions[12]);
        meas.Measurement14 = Convert.ToDecimal(positions[13]);
        meas.Measurement15 = Convert.ToDecimal(positions[14]);
        meas.Measurement16 = Convert.ToDecimal(positions[15]);
        meas.Measurement17 = Convert.ToDecimal(positions[16]);
        meas.Measurement18 = Convert.ToDecimal(positions[17]);
        meas.Measurement19 = Convert.ToDecimal(positions[18]);
        meas.Measurement20 = Convert.ToDecimal(positions[19]);

        meas.Measurement21 = Convert.ToDecimal(positions[20]);
        meas.Measurement22 = Convert.ToDecimal(positions[21]);
        meas.Measurement23 = Convert.ToDecimal(positions[22]);
        meas.Measurement24 = Convert.ToDecimal(positions[23]);
        meas.Measurement25 = Convert.ToDecimal(positions[24]);
        meas.Measurement26 = Convert.ToDecimal(positions[25]);
        meas.Measurement27 = Convert.ToDecimal(positions[26]);
        meas.Measurement28 = Convert.ToDecimal(positions[27]);
        meas.Measurement29 = Convert.ToDecimal(positions[28]);
        meas.Measurement30 = Convert.ToDecimal(positions[29]);

        meas.Measurement31 = Convert.ToDecimal(positions[30]);
        meas.Measurement32 = Convert.ToDecimal(positions[31]);
        meas.Measurement33 = Convert.ToDecimal(positions[32]);


        isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);





        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}/create");
        }
    }
}













