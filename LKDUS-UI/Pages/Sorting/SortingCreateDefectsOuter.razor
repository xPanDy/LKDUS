@page "/sortingouter/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusclass}/{pshift}/create/defects"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using LKDUS_UI.Service
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IMeasurementRepository measurementRepo
@inject IMachinesRepository machineRepository
@inject IAuthenticationRepository authRepo
@inject IPacksRepository packRepo
@inject IMeasurementTypeRepository measurementTypeRepository
@inject IJSRuntime JsRuntime
@inject ToastService toastService

@inject IDefectRepository defectRepo
@inject IClasssRepository classRepo

<style>


    .btn-success:active {
        color: #ffffff !important;
        background-color: #161617;
        border-color: #494F57;
    }

    td {
        word-wrap: break-word;
    }

    .nonono {
        white-space: nowrap;
        overflow: hidden;
    }

    h4 {
        padding-left: 5px;
        padding-right: 5px;
    }

    #test2:hover {
        background-color: green;
    }

    #test2:active {
        background-color: green;
        color: white;
    }

    #test2:focus {
        background-color: green;
        color: white;
    }




    .counter-box {
        display: block;
        background: #f6f6f6;
        padding: 5px;
        text-align: center
    }

        .counter-box p {
            margin: 0px 0 0;
            padding: 0;
            color: #909090;
            font-size: 18px;
            font-weight: 500
        }

        .counter-box i {
            font-size: 25px;
            margin: 0 0 15px;
            color: #d2d2d2
        }

    .counter {
        display: inline-block;
        font-size: 32px;
        font-weight: 700;
        color: #666;
        line-height: 28px
    }




    .counter-box.colored {
        background: #3acf87;
        display: inline-block;
    }

    .counterminus {
        display: inline-block;
        background: red;
        text-align: center;
        color: #fff;
        font-size: 60px;
        font-weight: 700;
    }

    .counter-box.colored p,
    .counter-box.colored i,
    .counter-box.colored .counter {
        color: #fff
    }

    p {
        word-wrap: break-word;
    }



    .btn.abc {
        width: 300px;
        font-size: 25px;
        display: inline-block;
        background-color: #088977;
        color: white;
        justify-content: center;
        align-items: center;
        white-space: normal;
        height: 50%;
    }

    .plus {
        font-size: 18px;
        display: inline;
    }
    
    .minus {
        display: inline;
        font-size: 25px;
    }

    .btn.minus {
        background-color: #F16360;
        width: 50px;
        height: 50%;
        color: white;
    }

    .row {
        padding-top: 5px;
    }
</style>



<div class="container">
    <div class="row">
        <div class="col">
            <button type="button" @onclick="@Return" class="btn btn-primary btn-block">Atpakaļ</button>
        </div>
        <div class="col w-25"><h3 style="text-align: center; " class="card-title">Defekti</h3></div>
        <div class="col">
            <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
        </div>

    </div>
</div>
<div class="container">



    @if (ClassList != null)
    {





        @if (measurementsMade != null)
        {





            <div id="test" class="btn-group btn-group-toggle" data-toggle="buttons">


                @for (int i = 0; i < measurementsMade.GetLength(0); i++)
                {
                    int ii = i;

                    <label @onclick="e => SetClass(ii) " id="test2"
                           style="background-color: @colorBgs[i];"
                           class="btn btn-secondary active">
                        <input type="radio" name="options" id="option1" autocomplete="off" checked>@ClassList[i].ClassName
                    </label>

                }
            </div>


            @if (isclassClicked == true)
            {
                <div class="row">
                    <div class="col-sm-4">

                        @for (int j = 0; j < measurementsMade.GetLength(1) / 3; j++)
                        {
                            int tmp = j;


                            <div class="row">
                                <div class="btn abc" @onclick="e => select(tmp, +1, SelectedIdOfTheClass)" type="button">
                                    <div>
                                        <div class="plus"> + </div>
                                        <div class="plus"> @measurementsMade[SelectedIdOfTheClass, tmp] </div>
                                        <div class="plus"> @DefectList[j].Name</div>
                                    </div>

                                </div>
                                <div disabled="@isDisabledMinus[SelectedIdOfTheClass, tmp]" @onclick="e => select(tmp, -1, SelectedIdOfTheClass)"
                                     class="btn minus">
                                    -
                                </div>
                                 
                            </div>





                        }




                    </div>
                    <div class="col-sm-4">

                        @for (int j = measurementsMade.GetLength(1) / 3; j < (measurementsMade.GetLength(1) / 3) * 2; j++)
                        {
                            int tmp = j;


                            <div class="row">
                                <div class="btn abc" @onclick="e => select(tmp, +1, SelectedIdOfTheClass)" type="button">
                                    <div>
                                        <div class="plus"> + </div>
                                        <div class="plus"> @measurementsMade[SelectedIdOfTheClass, tmp] </div>
                                        <div class="plus"> @DefectList[j].Name</div>
                                    </div>

                                </div>
                                <div disabled="@isDisabledMinus[SelectedIdOfTheClass, tmp]" @onclick="e => select(tmp, -1, SelectedIdOfTheClass)"
                                     class="btn minus">
                                    -
                                </div>
                            </div>





                        }




                    </div>
                    <div class="col-sm-4">

                        @for (int j = (measurementsMade.GetLength(1) / 3) * 2; j < measurementsMade.GetLength(1); j++)
                        {
                            int tmp = j;


                            <div class="row">
                                <div class="btn abc " @onclick="e => select(tmp, +1, SelectedIdOfTheClass)" type="button">
                                    <div>
                                        <div class="plus"> + </div>
                                        <div class="plus"> @measurementsMade[SelectedIdOfTheClass, tmp] </div>
                                        <div class="plus"> @DefectList[j].Name</div>
                                    </div>

                                </div>
                                <div disabled="@isDisabledMinus[SelectedIdOfTheClass, tmp]" @onclick="e => select(tmp, -1, SelectedIdOfTheClass)"
                                     class="btn minus">
                                    -
                                </div>
                            </div>





                        }




                    </div>
                      </div>
                

                

            }

            else
            {
                <LoadingMessage Message="Izvēlies šķiru lai turpinātu!"></LoadingMessage>

            }






        }




    }
    else
    {
        <LoadingMessage Message="Notiek šķiru ielāde!"></LoadingMessage>

    }







</div>




@code {
    int selecteSizeType = 0;


    public string colorBgP1 = "white";
    public string colorBgP2 = "white";
    public string colorBgP3 = "white";
    public string colorBgP4 = "white";
    public string colorBgP5 = "white";
    public string colorBgP6 = "white";
    public string colorBgP7 = "white";
    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string fusclass { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }
    [Parameter]
    public string fusMachineName { get; set; }
    [Parameter]
    public string pshift { get; set; }
    private IList<Measurement> Model2;
    private IList<Classs> ClassList = new List<Classs>();
    private IList<Defect> DefectList = new List<Defect>();
    private string[] colorBgs = new string[30];
    public bool isclassClicked = false;

    private string[,] currentElement = new string[10, 2];
    protected async override Task OnInitializedAsync()
    {
        for (int i = 0; i < colorBgs.Length; i++)
        {
            colorBgs[i] = "gray";
        }
        DefectList = await defectRepo.Get(Endpoints.DefectsEndpoint);

        ClassList = await classRepo.Get(Endpoints.ClasssEndpoint);
        measurementsMade = new int[ClassList.Count, DefectList.Count];
        isDisabledMinus = new bool[ClassList.Count, DefectList.Count];

        for (int i = 0; i < measurementsMade.GetLength(0); i++)
        {
            for (int j = 0; j < measurementsMade.GetLength(1); j++)
            {
                measurementsMade[i, j] = 0;
                isDisabledMinus[i, j] = true;
            }
        }

    }




    bool[,] isDisabledMinus;

    int[,] measurementsMade;

    int SelectedIdOfTheClass;
    private void SetClass(int classNumber)
    {
        SelectedIdOfTheClass = classNumber;


        for (int i = 0; i < colorBgs.Length; i++)
        {
            if (i == classNumber)
            {
                colorBgs[classNumber] = "green";
            }
            else
            {
                colorBgs[i] = "gray";
            }
        }

        isclassClicked = true;




    }

    int selectedDefectId;
    private void select(int indexOfDefect, int valuetoadd, int selectedClassId)
    {

        // if(valuetoadd==-1 && )

        //if (measurementsMade[selectedClassId, indexOfDefect] == 0)
        //{
        //    isDisabledMinus[indexOfDefect] = true;
        //   // return;

        //}
        //else
        //{
        //    isDisabledMinus[indexOfDefect] = false;
        //}

        //for (int i = 0; i < measurementsMade.GetLength(0); i++)
        //{
        //    for (int j = 0; j < measurementsMade.GetLength(1); j++)
        //    {
        //        if (i == selectedClassId && indexOfDefect == j)
        //        {
        //            if (measurementsMade[selectedClassId,indexOfDefect] >= 0)
        //            {
        //                measurementsMade[ selectedClassId, indexOfDefect] = measurementsMade[selectedClassId, indexOfDefect]
        //                    + valuetoadd;


        //            }

        //        }
        //    }

        //}

        if (measurementsMade[selectedClassId, indexOfDefect] == 0 && valuetoadd == -1)
        {
            return;
        }


        measurementsMade[selectedClassId, indexOfDefect] = measurementsMade[selectedClassId, indexOfDefect]
    + valuetoadd;





        if (measurementsMade[selectedClassId, indexOfDefect] == 0)
        {
            isDisabledMinus[selectedClassId, indexOfDefect] = true;
            // return;

        }
        else
        {
            isDisabledMinus[selectedClassId, indexOfDefect] = false;
        }


        //for (int i = 0; i < positions.Length; i++)
        //{
        //    if (i == index)
        //    {
        //        if (positions[i] >= 0)
        //        {
        //            positions[i] = positions[i] + valuetoadd;


        //        }
        //        if (positions[i] == 0)
        //        {
        //            isDisabledMinus[i] = true;
        //            break;
        //        }
        //        else
        //        {
        //            isDisabledMinus[i] = false;
        //        }
        //    }
        //}




    }

    private ElementReference input1;
    [Inject] IJSRuntime JSRuntime { get; set; }



    private int[] positions = new int[33];
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            // measurementsMade = new int[ClassList.Count, DefectList.Count];

            if (measurementsMade != null)
            {

                for (int i = 0; i < measurementsMade.GetLength(0); i++)
                {
                    for (int j = 0; j < measurementsMade.GetLength(1); j++)
                    {
                        measurementsMade[i, j] = 0;
                        isDisabledMinus[i, j] = true;
                    }
                }
            }
        }

    }
    int lastRow1;
    int lastRow2;
    string colorBg1;
    string colorBg2;






    private async void Return(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}/create");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>
    ("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}/create");
            }
        }

    }

    bool isSuccess = false;
    bool isPackCreated = false;
    MeasurementType mt = new MeasurementType();

    private IList<Pack>
        ModelPacks;
    private async void SaveMeasurement()
    {
        int packId = int.Parse(stringPackValue);
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 1022);
        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);


        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }
        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }
        //var pid = ModelPacks.Max(el => el.Id) + 1;

        IList<Measurement>
            measurementsToCreate = new List<Measurement>
                ();
        Pack pack = new Pack();
        Machine machine = new Machine();
        // machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        pack.MeasurementTypeName = mt.Name;
        pack.DimensionId = selecteSizeType;

        pack.Machine = fusMachineName;
        pack.FusClass = fusclass;
        //   pack.Machine = "Plūsmas";

        pack.FusCode = stringPackValue;
        pack.Shift = shift;
        pack.Author = user.UserName;

        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();


        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');










        bool[] isAllInRowZero = new bool[DefectList.Count];
        for (int i = 0; i < isAllInRowZero.GetLength(0); i++)
        {

            isAllInRowZero[i] = true;

        }

        for (int i = 0; i < measurementsMade.GetLength(0); i++)
        {
            for (int j = 0; j < measurementsMade.GetLength(1); j++)
            {
                if (measurementsMade[i, j] != 0)
                {
                    isAllInRowZero[i] = false;
                    break;
                }
            }
        }

        for (int i = 0; i < ClassList.Count; i++)
        {

            if (isAllInRowZero[i] != true)
            {
                Measurement meas = new Measurement();
                meas.DateCreated = DateTime.Parse(measurementDateAndTime);
                // var packId = ModelPacks. Max(el => el.Id) + 1;
                meas.Shift = shift;
                // meas.MachineName = int.Parse(pmachineIdd); //machine.Id;'
                meas.MachineName = fusMachineName;

                meas.UserId = userId;
                meas.MeasurementPositionId = int.Parse(measurementPositionId);
                meas.FusPackId = packId;
                meas.MeasurementTypeId = 1022;
                ;
                meas.PackId = int.Parse(elements[1]);

                meas.ClassId = ClassList[i].Id;

                //meas.DefectId = selectedDefectId;

                meas.Measurement1 = Convert.ToDecimal(measurementsMade[i, 0]);
                meas.Measurement2 = Convert.ToDecimal(measurementsMade[i, 1]);
                meas.Measurement3 = Convert.ToDecimal(measurementsMade[i, 2]);
                meas.Measurement4 = Convert.ToDecimal(measurementsMade[i, 3]);
                meas.Measurement5 = Convert.ToDecimal(measurementsMade[i, 4]);
                meas.Measurement6 = Convert.ToDecimal(measurementsMade[i, 5]);
                meas.Measurement7 = Convert.ToDecimal(measurementsMade[i, 6]);
                meas.Measurement8 = Convert.ToDecimal(measurementsMade[i, 7]);
                meas.Measurement9 = Convert.ToDecimal(measurementsMade[i, 8]);
                meas.Measurement10 = Convert.ToDecimal(measurementsMade[i, 9]);

                meas.Measurement11 = Convert.ToDecimal(measurementsMade[i, 10]);
                meas.Measurement12 = Convert.ToDecimal(measurementsMade[i, 11]);
                meas.Measurement13 = Convert.ToDecimal(measurementsMade[i, 12]);
                meas.Measurement14 = Convert.ToDecimal(measurementsMade[i, 13]);
                meas.Measurement15 = Convert.ToDecimal(measurementsMade[i, 14]);
                meas.Measurement16 = Convert.ToDecimal(measurementsMade[i, 15]);
                meas.Measurement17 = Convert.ToDecimal(measurementsMade[i, 16]);
                meas.Measurement18 = Convert.ToDecimal(measurementsMade[i, 17]);
                meas.Measurement19 = Convert.ToDecimal(measurementsMade[i, 18]);
                meas.Measurement20 = Convert.ToDecimal(measurementsMade[i, 19]);

                meas.Measurement21 = Convert.ToDecimal(measurementsMade[i, 20]);
                meas.Measurement22 = Convert.ToDecimal(measurementsMade[i, 21]);
                meas.Measurement23 = Convert.ToDecimal(measurementsMade[i, 22]);
                meas.Measurement24 = Convert.ToDecimal(measurementsMade[i, 23]);
                meas.Measurement25 = Convert.ToDecimal(measurementsMade[i, 24]);
                meas.Measurement26 = Convert.ToDecimal(measurementsMade[i, 25]);
                meas.Measurement27 = Convert.ToDecimal(measurementsMade[i, 26]);
                meas.Measurement28 = Convert.ToDecimal(measurementsMade[i, 27]);
                meas.Measurement29 = Convert.ToDecimal(measurementsMade[i, 28]);
                meas.Measurement30 = Convert.ToDecimal(measurementsMade[i, 29]);

                meas.Measurement31 = Convert.ToDecimal(measurementsMade[i, 30]);
                meas.Measurement32 = Convert.ToDecimal(measurementsMade[i, 31]);
                meas.Measurement33 = Convert.ToDecimal(measurementsMade[i, 32]);


                isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);


            }

        }


        //Measurement meas = new Measurement();
        //meas.DateCreated = DateTime.Parse(measurementDateAndTime);
        //// var packId = ModelPacks. Max(el => el.Id) + 1;
        //meas.Shift = shift;
        //// meas.MachineName = int.Parse(pmachineIdd); //machine.Id;'
        //meas.MachineName = fusMachineName;

        //meas.UserId = userId;
        //meas.MeasurementPositionId = int.Parse(measurementPositionId);
        //meas.FusPackId = packId;
        //meas.MeasurementTypeId = 1022;
        //;
        //meas.PackId = int.Parse(elements[1]);
        //meas.DefectId = selectedDefectId;










        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            this.navManager.NavigateTo($"/sorting/{userId}/{measurementPositionId}/create");
        }
    }
}













