@page "/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusMachineName}/{pshift}/create/measurementdimensions/length"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http
@using LKDUS_UI.Service
@inject ToastService toastService
@inject IMeasurementRepository repo
@inject NavigationManager navManager
@inject IMeasurementRepository measurementRepo
@inject IMachinesRepository machineRepository

@inject IPacksRepository packRepo
@inject IAuthenticationRepository authRepo

@inject IMeasurementTypeRepository measurementTypeRepository
@inject IJSRuntime JsRuntime



<style>
    #row1 {
        padding: 20px 20px 20px 20px;
        overflow: hidden;
    }

    .button-container {
        display: flex;
        /* displays flex-items (children) inline */
        justify-content: space-between;
        /* MDN: The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. */
        align-items: center;
        /* centers them vertically */
    }



    #back {
        background-color: #1b6ec2;
        color: white;
        padding: 25px;
        text-align: center;
    }

    #save {
        background-color: #1b6ec2;
        color: white;
        padding: 25px;
        text-align: center;
    }
</style>


<div id="row1">
    <div class="button-container">
        <span class="button-left" @onclick="@BacktochooseDimension">
            <h1><a id="back">Atpakaļ</a></h1>
        </span>
        <span>
            <h1>Mitrā finiera garums</h1>
        </span>
        @if (!isTypeCklicked)
        {
            <span style="visibility:hidden" class="button-right">
                <h1><a id="save">Saglabāt</a></h1>
            </span>
        }
        else
        {
            <span style="visibility:visible"  @onclick="@SaveMeasurement" class="button-right">
                <h1><a id="save">Saglabāt</a></h1>
            </span>
        }
    </div>
</div>


<!--<div class="container">


    <div class="row">-->
        @*<div class="col">
            <button type="button" @onclick="@BacktochooseDimension" class="btn btn-primary btn-block">Atpakaļ</button>
        </div>
        <div class="col w-25"><h3 class="card-title">Mitrā finiera garums</h3></div>*@

        <!--@if (!isTypeCklicked)
        {<div class="col">

            </div>
        }
        else
        {
            <div class="col">
                <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
            </div>
        }

    </div>
</div>-->
<!--<div class="row w-100">

    <div class="col w-75">-->
<div class="container">

    <div class="row">

        <div class="col">

            <button type="button" style="background-color:@colorBg1" @onclick="changecolor1AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>4x8</h4>
                <br />
                <h5>(28<span sstyle="color:red">XX</span>)</h5>
            </button>

        </div>


        <div class="col w-25"></div>

        <div class="col">

            <button type="button" style="background-color:@colorBg2;" @onclick="changecolor2AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>8x4</h4>
                <br />
                <h5>(13<span sstyle="color:red">XX</span>)</h5>
            </button>


        </div>

        <div class="col w-25"></div>

        <div class="col">

            <button type="button" style="background-color:@colorBg3;" @onclick="changecolor3AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>4x4</h4>
                <br />
                <h5>(13<span sstyle="color:red">XX</span>)</h5>

            </button>

        </div>

    </div>
    @if (isTypeCklicked)
    {
        <div class="row">
            <div class="col">
                <table class="table table-hover">

                    <thead>


                        <tr>

                            <th rowspan="2">Nr.p.k.</th>
                            <th colspan="2">Lokšņu garums</th>

                        </tr>

                    </thead>
                    <tbody>

                        @for (int i = 0; i < positions.Length; i++)
                        {
                            int local = i;
                            int npk = i + 1;
                            var tmpI = i;
                            <tr>

                                <td>@npk</td>












                                <td style="background-color:@elements[tmpI];" id="@currentElement[tmpI]" @onclick="( e => selectTableCell(tmpI))">@positions[i]  </td>







                            </tr>
                        }


                    </tbody>

                </table>
            </div>

            <div class="col w-25">

                <div class="d-flex justify-content-between">

                    <table class="table  ">
                        <tbody class="h-100">
                            <tr class="text-center">
                                <td colspan="3"> <button type="button" @onclick="Reduce" disabled="@isDisabledMinus" style="color:deeppink" class="btn btn-secondary btn-lg">-</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[0]))" class="btn btn-info btn-lg btn-block">@sizes[0]</button></td>


                                <td>  <button type="button" @onclick="(()=>select(sizes[1]))" class="btn btn-info btn-lg btn-block">@sizes[1]</button></td>


                                <td>  <button type="button" @onclick="(()=>select(sizes[2]))" class="btn btn-info btn-lg btn-block">@sizes[2]</button></td>
                            </tr>


                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[3]))" class="btn btn-info btn-lg btn-block">@sizes[3]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[4]))" class="btn btn-info btn-lg btn-block">@sizes[4]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[5]))" class="btn btn-info btn-lg btn-block">@sizes[5]</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[6]))" class="btn btn-info btn-lg btn-block">@sizes[6]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[7]))" class="btn btn-info btn-lg btn-block">@sizes[7]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[8]))" class="btn btn-info btn-lg btn-block">@sizes[8]</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[9]))" class="btn btn-info btn-lg btn-block">@sizes[9]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[10]))" class="btn btn-info btn-lg btn-block">@sizes[10]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[11]))" class="btn btn-info btn-lg btn-block">@sizes[11]</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[12]))" class="btn btn-info btn-lg btn-block">@sizes[12]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[13]))" class="btn btn-info btn-lg btn-block">@sizes[13]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[14]))" class="btn btn-info btn-lg btn-block">@sizes[14]</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[15]))" class="btn btn-info btn-lg btn-block">@sizes[15]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[16]))" class="btn btn-info btn-lg btn-block">@sizes[16]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[17]))" class="btn btn-info btn-lg btn-block">@sizes[17]</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[18]))" class="btn btn-info btn-lg btn-block">@sizes[18]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[19]))" class="btn btn-info btn-lg btn-block">@sizes[19]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[20]))" class="btn btn-info btn-lg btn-block">@sizes[20]</button></td>
                            </tr>
                            <tr class="text-center">
                                <td>  <button type="button" @onclick="(()=>select(sizes[21]))" class="btn btn-info btn-lg btn-block">@sizes[21]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[22]))" class="btn btn-info btn-lg btn-block">@sizes[22]</button></td>

                                <td>  <button type="button" @onclick="(()=>select(sizes[23]))" class="btn btn-info btn-lg btn-block">@sizes[23]</button></td>
                            </tr>

                            <tr class="text-center">
                                <td colspan="3">  <button type="button" style="color:lawngreen" @onclick="Add" disabled="@isDisabledPlus" class="btn btn-secondary btn-lg">+</button></td>
                            </tr>
                        </tbody>
                    </table>

                </div>


            </div>
        </div>

    }
    else
    {

        <LoadingMessage Message="Izvēlies izmēru lai sāktu mērījumu"></LoadingMessage>

    }




</div>



@code {
    private IList<Measurement> Model2;
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string userId { get; set; }
    public int[] positions = new int[10];
    [Parameter]
    public string pshift { get; set; }
    private string[] elements { get; set; } = new string[10];

    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }
    [Parameter]
    public string fusMachineName { get; set; }


    private string[] currentElement = new string[10];
    protected async override Task OnInitializedAsync()
    {
        ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);
        // Model2 = await this.repo.Get(Endpoints.MeasurementEndpoint);
        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = start;
            start = start + 1;
        }

        //for (int i = 0; i < positions.GetLength(0); i++)
        //{
        for (int j = 0; j < positions.Length; j++)
        {
            positions[j] = 0;
            //}
        }
        for (int i = 0; i < elements.GetLength(0); i++)
        {


            elements[i] = "";

        }
        elements[0] = "red";
        for (int i = 0; i < currentElement.Length; i++)
        {
            currentElement[i] = "current" + i;
        }

    }

    int dimension = 0;

    public string colorBg1 = "white";
    public string colorBg2 = "white";
    public string colorBg3 = "white";
    bool isTypeCklicked;
    int selecteSizeType = 0;
    private void changecolor1AndSetSizes()
    {
        dimension = 1;

        isTypeCklicked = true;
        selecteSizeType = 13;
        colorBg1 = "greenyellow";
        colorBg2 = "white";
        colorBg3 = "white";

    }
    private void changecolor2AndSetSizes()
    {
        dimension = 2;
        isTypeCklicked = true;
        selecteSizeType = 28;
        colorBg1 = "white";
        colorBg2 = "greenyellow";
        colorBg3 = "white";
    }
    private void changecolor3AndSetSizes()
    {
        dimension = 3;
        isTypeCklicked = true;
        selecteSizeType = 13;
        colorBg1 = "white";
        colorBg2 = "white";
        colorBg3 = "greenyellow";
    }
    private int actPos;

    private int[] sizes = new int[24];
    private int[] poz = new int[10];
    private int start = 1;

    private int selectedCellI = 0;
    private int selectedCellJ = 0;
    private int[] positionValues = new int[10];
    private int positionValue;


    private void select(int value)
    {
        //positionValues[actPos] = value;//

        if (isEdit)
        {
            for (int i = 0; i < currentElement.GetLength(0); i++)
            {

                if (currentElement[i] == editPosition)
                {
                    positions[i] = value;
                }


            }
            isEdit = false;

        }
        else
        {

            if (actPos < elements.GetLength(0))
            {
                positions[actPos] = value;

                actPos = actPos + 1;
            }
            // positions[selectedCellI, selectedCellJ] = value;

            for (int i = 0; i < elements.GetLength(0); i++)
            {
                if (actPos == i)
                {
                    elements[actPos] = "red";
                }
                else
                {
                    elements[i] = "";
                }
            }
        }
    }
    bool isEdit = false;
    string editPosition = "";
    private void selectTableCell(int ii)
    {

        isEdit = true;
        for (int i = 0; i < elements.GetLength(0); i++)
        {


            if (i == ii)
            {
                elements[i] = "yellow";
                editPosition = "current" + i;

            }
            else
            {
                elements[i] = "";
            }
            //if (currentElement[i,j] == activePosition)
            //  {
            //      activePosition = "current" + i + j;
            //      elements[i, j] = "red";
            //      break;
            //  }

        }


        selectedCellI = ii;
        // selectedCellJ = jj;


    }

    public async void focusToNextElement(int i)
    {
        //await JsRuntime.InvokeAsync<object>("Alert", "x" + i + " y " + j);
        int focus = 0;
        for (int x = 0; x < currentElement.GetLength(0); x++)
        {



        }



    }

    private async void BacktochooseDimension(MouseEventArgs e)
    {
        /*

    Copy this string to your clipboard: dom.successive_dialog_time_limit
    In FireFox Address bar Enter: about:config and press enter.
    Accept the warning dialog.
    In the preferences area right-click.
    Select New-> Integer
    Paste the string you copied previous and click OK
    Enter the integer 0 in the next dialog box and click OK.1
    Close the about:config page.


        */
        if (isMeasurementCreated && isPackCreated)
        {
            this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusMachineName}/{pshift}/create/measurementdimensions");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusMachineName}/{pshift}/create/measurementdimensions");
            }
        }
    }


    private void Reduce(MouseEventArgs e)
    {
        //for (int i = 0; i < sizes.Length; i++)
        //{

        //    sizes[i] = sizes[i] - 10;
        //}
        int toRemove = 9;
        if (sizes[0] == 4)
        {
            toRemove = 3;
        }
        if (sizes[0] == 1)
        {
            isDisabledMinus = true;
            return;
        }
        if (sizes[23] <= 99)
        {
            isDisabledPlus = false;
        }

        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] - toRemove;



        }
    }
    bool isDisabledMinus = true;
    bool isDisabledPlus = false;

    private void Add(MouseEventArgs e)
    {
        //  Color = "black";

        //for (int i = 0; i < sizes.Length; i++)
        //{

        //    sizes[i] = sizes[i] + 10;
        //}
        if (sizes[0] >= 1)
        {
            isDisabledMinus = false;

        }
        if (sizes[23] == 99)
        {
            isDisabledPlus = true;
            return;

        }

        int toAdd = 9;
        if (sizes[23] == 96)
        {
            toAdd = 3;
        }
        for (int i = 0; i < sizes.Length; i++)
        {


            sizes[i] = sizes[i] + toAdd;
        }
    }

    private IList<Pack> ModelPacks;
    MeasurementType mt = new MeasurementType();
    bool isMeasurementCreated = false;
    bool isPackCreated = false;
    private async void SaveMeasurement()
    {
        //var pid = ModelPacks.Max(el => el.Id) + 1;
        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 4);
        int packId = int.Parse(stringPackValue);

        String measurementDateAndTime = DateTime.Now.ToString("g");

        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }


        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }


        IList<Measurement> measurementsToCreate = new List<Measurement>();

        Pack pack = new Pack();
        // Machine machine = new Machine();

        //machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        pack.Machine = fusMachineName; //machine.Name;
        pack.Shift = shift;
        pack.Author = user.UserName;
        pack.FusCode = stringPackValue;
        pack.DimensionId = dimension;
        pack.MeasurementTypeName = mt.Name;

        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');


        for (int j = 0; j < positions.Length; j++)
        {


            Measurement meas = new Measurement();
            meas.DateCreated = DateTime.Parse(measurementDateAndTime);
            meas.Shift = shift;
            meas.MachineName = fusMachineName; //machine.Id;
            meas.UserId = userId;
            meas.MeasurementPositionId = int.Parse(measurementPositionId);
            meas.FusPackId = packId;
            meas.MeasurementTypeId = 4;
            meas.PackId = int.Parse(elements[1]);

            string newMeasSize = selecteSizeType.ToString();




            if (positions[j] == 0)
            {
                newMeasSize = newMeasSize + "00";
            }
            else if (positions[j] > 0 && positions[j] < 10)
            {
                newMeasSize = newMeasSize + "0" + positions[j];
            }
            else
            {

                newMeasSize = newMeasSize + positions[j];
            }


            meas.Measurement1 = Convert.ToDecimal(newMeasSize);

            newMeasSize = "";


            measurementsToCreate.Add(meas);


            isMeasurementCreated = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);

        }


        if (packToCreate != null && isMeasurementCreated)
        {
            isPackCreated = true;
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
        }
    }

}
