@page "/measurements/{userId}/{measurementPositionId}"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http

@inject IMeasurementRepository repo
@inject IPacksRepository pRepo
@inject NavigationManager navManager
@inject IMeasurementPositionsRepository measurementPositionRepo



<div   style="height:100%">
    <div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@goBack" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col">
            </div>
            <div class="col">
            </div>
        </div>
    </div>

    <div style="height:50%" class="container">
        <div class="mh-50">
            <h3 class="card-title">@mp.Name</h3>
            <button type="button" @onclick="@OpenCreateForm" class="btn btn-info">Jauna paka</button>
            <h3 class="card-title">Pārbaudītās pakas</h3>

        </div>


    </div>



    @if (Model == null)
    {
        <LoadingMessage Message="Notiek mērījumu ielāde" />
    }
    else
    {
 
        <div class="container pre-scrollable"  style="height:100%;  max-height: 540px;
    overflow-y: scroll;">
            <div class="mh-100">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Nr.                 </th>
                            <th scope="col">Datums              </th>
                            <th scope="col">Iekārta               </th>
                            <th scope="col">Maiņa             </th>
                            <th scope="col">Laborants           </th>
                            <th scope="col">Fus Pakas ID   </th>
                            <th scope="col">Mērījuma tips </th>
                            <th scope="col">Rādītājs 1 </th>
                            <th scope="col">Rādītājs 2</th>
                            <th scope="col">Darbība</th>


                            @*<th scope="col">Meistars</th>*@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var model in Model)
                        {

                            <tr>
                                <th scope="row">@model.Id</th>
                                <td>@model.DateCreated</td>
                                <td>@model.Machine</td>
                                <td>@model.Shift</td>
                                <td>@model.Author</td>
                                <td>@model.FusCode</td>
                                <td>@model.MeasurementTypeName</td>
                                <td> </td>
                                <td> </td>
                                <td> <button @onclick="(e=>viewMeasurement(model.FusCode, model.Id, model.MeasurementTypeName))" type="button"  class="btn btn-success">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
        <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"></path>
        <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"></path>
    </svg>
    Skatīt
</button></td>





                            </tr>

                        }


                    </tbody>
                </table>
            </div>



        </div>




    }
</div>
@code {

    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string userId { get; set; }

    MeasurementPosition mp = new MeasurementPosition();

    protected override void OnParametersSet()
    {
        //the param will be set now
        string test = measurementPositionId;
    }

    //private IList<Measurement> Model;
    private IList<Pack> Model;
    private MeasurementPosition measurementPosition;

    protected async override Task OnInitializedAsync()
    {
        Model = await pRepo.Get(Endpoints.PacksEndpoint);
        //odel = Model.OrderByDescending(el => el.Id).ToList() ;
        Model = Model.OrderByDescending(el => el.Id).Where(el => el.MeasurementTypeName.Equals("Platums")||   el.MeasurementTypeName.Equals("Biezums")||
              el.MeasurementTypeName.Equals("Kvalitāte")||   el.MeasurementTypeName.Equals("Garums")).ToList();

 
        try
        {
            int result = Int32.Parse(measurementPositionId);
            mp = await measurementPositionRepo.Get(Endpoints.MeasurementPositions, result);

        }

        catch (FormatException)
        {
            Console.WriteLine($"Unable to parse");
        }
    }


    private void viewMeasurement(string fusCode, int packId, string measurementTypeName)
    {

        this.navManager.NavigateTo($"/measurements/{fusCode}/{measurementPositionId}/{userId}/{packId}/{measurementTypeName}/view");
    }

    private void OpenCreateForm(MouseEventArgs e)
    {
         this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }
    private void goBack(MouseEventArgs e)
    {
        this.navManager.NavigateTo($"/measurementpositions/{userId}");
    }
}
