@page "/measurements/{userId}/{measurementPositionId}/{stringPackValue}/{pmachineIdd}/{fusMachineName}/{pshift}/create/thickness"

@using LKDUS_UI.Models
@using LKDUS_UI.Static
@using LKDUS_UI.Contracts
@using System.Net.Http

@using LKDUS_UI.Service
@inject ToastService toastService
@inject NavigationManager navManager

@inject IMeasurementRepository measurementRepo;
@inject IMachinesRepository machineRepository
@inject IMeasurementTypeRepository measurementTypeRepository;
@inject IMeasurementRangeRepository measurementRangeRepo;
@inject IPacksRepository packRepo
@inject IAuthenticationRepository authRepo
@inject IMeasurementTypeRepository measTRepo
@inject IJSRuntime JsRuntime;
<style>

    .table-scroll {
        display: block;
    }

        .table-scroll thead {
            background-color: #f1f1f1;
            position: relative;
            display: block;
            width: 100%;
        }

        .table-scroll tbody {
            display: block;
            position: relative;
            width: 100%;
            overflow-y: scroll;
        }

        .table-scroll tr {
            width: 100%;
            display: flex;
        }

        .table-scroll td, .table-scroll th {
            flex-basis: 100%;
            flex-grow: 2;
            display: block;
            padding: 5px;
            text-align: left;
        }

        /* Other options */

        .table-scroll.small-first-col td:first-child,
        .table-scroll.small-first-col th:first-child {
            flex-basis: 20%;
            flex-grow: 1;
        }

        .table-scroll tbody tr:nth-child(2n) {
            background-color: rgba(130,130,170,0.1);
        }

        .table-scroll tfoot {
            background-color: #f1f1f1;
            position: relative;
            display: block;
            width: 100%;
        }

    .body-half-screen {
        max-height: 35vh;
    }
</style>

<style>
    #row1 {
        padding: 20px 20px 20px 20px;
        overflow: hidden;
    }

    .button-container {
        display: flex;
        /* displays flex-items (children) inline */
        justify-content: space-between;
        /* MDN: The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. */
        align-items: center;
        /* centers them vertically */
    }



    #back {
        background-color: #1b6ec2;
        color: white;
        padding: 25px;
        text-align: center;
    }

    #save {
        background-color: #1b6ec2;
        color: white;
        padding: 25px;
        text-align: center;
    }
</style>


<div id="row1">
    <div class="button-container">
        <span class="button-left" @onclick="@GoToCreation">
            <h1><a id="back">Atpakaļ</a></h1>
        </span>
        <span>
            <h1>Mitrā finiera biezums</h1>
        </span>
        @if (!isTypeCklicked)
        {
            <span style="visibility:hidden" class="button-right">
                <h1><a id="save">Saglabāt</a></h1>
            </span>
        }
        else
        {
            <span style="visibility:visible" @onclick="@SaveMeasurement" class="button-right">
                <h1><a id="save">Saglabāt</a></h1>
            </span>
        }
    </div>
</div>
<div>

    @*<div class="container">
        <div class="row">

            <div class="col">
                <button type="button" @onclick="@GoToCreation" class="btn btn-primary btn-block">Atpakaļ</button>
            </div>
            <div class="col w-25"><h3 class="card-title">Mitrā finiera biezums</h3></div>
            @if (!isTypeCklicked)
            {<div class="col">

                </div>
            }
            else
            {
                <div class="col">
                    <button type="submit" @onclick="@SaveMeasurement" class="btn btn-primary btn-block">Saglabāt</button>
                </div>
            }

        </div>
    </div>*@
    <div class="row">

        <div class="col">

            <button type="button" style="background-color:@colorBgP1" @onclick="changecolor1AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>4x8</h4>

            </button>

        </div>


        <div class="col w-25"></div>

        <div class="col">

            <button type="button" style="background-color:@colorBgP2;" @onclick="changecolor2AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>8x4</h4>


            </button>


        </div>

        <div class="col w-25"></div>

        <div class="col">

            <button type="button" style="background-color:@colorBgP3;" @onclick="changecolor3AndSetSizes" class="btn btn-outline-secondary btn-block">
                <h4>4x4</h4>



            </button>

        </div>

    </div>
    @if (isTypeCklicked)
    {

        <div class="form-group">
            <label for="machine">Iekārta</label>
            <input id="machine" class="form-control" type="text" placeholder=@fusMachineName readonly>

        </div>

        <div class="form-group">

            <table class="table-scroll  ">
                <thead>
                    <tr>
                        <th class="text-center">Nr.</th>
                        <th class="text-center">1  </th>
                        <th class="text-center">2  </th>
                        <th class="text-center">3  </th>
                    </tr>
                </thead>
                <tbody class="body-half-screen">


                    @if (sizesArray != null)
                    {
                        for (int i = 0; i < sizesArray.GetLength(0); i++)
                        {

                            int tmp = i;
                            var rowNumber = i + 1;
                            //id="@tmp"
                            @* OLD<div id="@currentRow[i]">
                                    <tr tabindex="1" id="@rows[i]" style="background-color: @Background[i]" @onclick="(e => HighlightSelected1(tmp))">

                                        <td class="text-center" scope="row">
                                            @rowNumber

                                        </td>

                                        @for (int j = 0; j < sizesArray.GetLength(1); j++)
                                        {
                                            <td style="background-color: @highlight2"
                                                class="text-center">
                                                @sizesArray[i, j]
                                            </td>


                                        }
                                    </tr>@onclick="(e => HighlightSelected1(tmp))"
                                </div>*@
                            <tr>
                                <td class="text-center" scope="row">@rowNumber</td>
                                @for (int j = 0; j < sizesArray.GetLength(1); j++)
                                {
                                    int tmpx = i;
                                    int tmpj = j;
                                    <td class="text-center" @onclick="(e => HighlightSelected(tmpx,tmpj))" style="background-color: @colors[i,j]" id="@idsForCells[i,j]">@sizesArray[i, j]</td>
                                }
                            </tr>
                        }
                    }


                </tbody>
                <tfoot>
                    <tr>
                        <td class="text-center">Vid.:</td>
                        <td class="text-center">
                            <div style="background-color:@colorBg2">
                                <span class="badge badge-info">@avg1</span>
                                @*<br />
                                    <span class="badge badge-light">
                                        @sizesArray[@actPosRow, @actPosCol]
                                        @rowPositionValues[0]

                                    </span>*@
                            </div>
                        </td>
                        <td class="text-center">
                            <div style="background-color:@colorBg2;">
                                <span class="badge badge-info">@avg2</span>
                                @*<br />
                                    <span class="badge badge-light">
                                    @sizesArray[@actPosRow,@actPosCol]
                                    @rowPositionValues[1]</span>*@
                            </div>
                        </td>
                        <td class="text-center">
                            <div type="button" style="background-color:@colorBg3;">
                                <span class="badge badge-info">@avg3</span>
                                @*<br />
                                    <span class="badge badge-light">
                                    @sizesArray[@actPosRow, @actPosCol]
                                    @rowPositionValues[2]
                                    </span>*@
                            </div>
                        </td>

                    </tr>



                </tfoot>
            </table>
        </div>



        <div class="container">




        </div>





        <div class="container">

            <div class="d-flex justify-content-between">
                <button type="button" @onclick="Limeuce" disabled="@visibilitystatus" style="color:deeppink" class="btn btn-secondary btn-lg">-</button>
                <table class="table table-bordeLime table-bordeLime">
                    <tbody>
                        <tr class="text-center">

                            <td><button type="button" @onclick="(()=>select(sizes[0]))" class="btn btn-info btn-lg btn-block">@sizes[0]</button></td>
                            <td><button type="button" @onclick="(()=>select(sizes[1]))" class="btn btn-info btn-lg btn-block">@sizes[1]</button></td>
                            <td><button type="button" @onclick="(()=>select(sizes[2]))" class="btn btn-info btn-lg btn-block">@sizes[2]</button></td>

                        </tr>
                        <tr class="text-center">
                            <td><button type="button" @onclick="(()=>select(sizes[3]))" class="btn btn-info btn-lg btn-block">@sizes[3]</button></td>
                            <td><button type="button" @onclick="(()=>select(sizes[4]))" class="btn btn-info btn-lg btn-block">@sizes[4]</button></td>
                            <td><button type="button" @onclick="(()=>select(sizes[5]))" class="btn btn-info btn-lg btn-block">@sizes[5]</button></td>
                        </tr>
                        <tr class="text-center">
                            <td><button type="button" @onclick="(()=>select(sizes[6]))" class="btn btn-info btn-lg btn-block">@sizes[6]</button></td>
                            <td><button type="button" @onclick="(()=>select(sizes[7]))" class="btn btn-info btn-lg btn-block">@sizes[7]</button></td>
                            <td><button type="button" @onclick="(()=>select(sizes[8]))" class="btn btn-info btn-lg btn-block">@sizes[8]</button></td>
                        </tr>
                    </tbody>
                </table>
                <button type="button" style="color:lawngreen" @onclick="Add" class="btn btn-secondary btn-lg">+</button>
            </div>

        </div>
    }
    else
    {
        <LoadingMessage Message="Izvēlies izmēru lai sāktu mērījumu"></LoadingMessage>
    }
</div>


@code {
    [Parameter]
    public string pshift { get; set; }
    public string colorBgP1 = "white";
    public string colorBgP2 = "white";
    public string colorBgP3 = "white";
    public bool isTypeCklicked = false;
    public string colorBg1 = "white";
    public string colorBg2 = "white";
    public string colorBg3 = "white";

    public string[] rows = new string[40];

    public string[,] colors = new string[40, 3];

    public async void focustoDiv(int i)
    {
        await JsRuntime.InvokeVoidAsync("blazorHelpers.scrollToFragment", "currentRow" + i);

    }


    bool isEdit = false;
    string editPosition = "";
    private void HighlightSelected(int a, int b)
    {
        isEdit = true;
        for (int i = 0; i < colors.GetLength(0); i++)
        {

            for (int j = 0; j < colors.GetLength(1); j++)
            {
                if (i == a && b == j)
                {
                    colors[i, j] = "yellow";
                    editPosition = "cell" + i + j;

                }
                else if (sizesArray[i, j] < mr.FormatMin || sizesArray[i, j] > mr.FormatMax && sizesArray[i, j] != 0)
                {
                    colors[i, j] = "#F99B28";
                }
                else
                {
                    colors[i, j] = "";

                }

                if (idsForCells[i, j] == activePosition)
                {
                    activePosition = "cell" + i + j;
                    colors[i, j] = "Lime";
                    break;
                }
            }
        }

    }

    int selecteSizeType = 0;
    int selectionType = 0;
    string activePosition = "";
    int dimension = 0;
    private void changecolor1AndSetSizes()
    {
        dimension = 1;

        for (int i = 0; i < colors.GetLength(0); i++)
        {
            for (int j = 0; j < colors.GetLength(1); j++)
            {
                colors[i, j] = "";
            }
        }
        activePosition = "cell00";
        colors[0, 0] = "Lime";

        isTypeCklicked = true;

        selecteSizeType = 2;
        colorBgP1 = "greenyellow";
        colorBgP2 = "white";
        colorBgP3 = "white";

    }
    private void changecolor2AndSetSizes()
    {
        dimension = 2;
        for (int i = 0; i < colors.GetLength(0); i++)
        {
            for (int j = 0; j < colors.GetLength(1); j++)
            {
                colors[i, j] = "";
            }
        }
        activePosition = "cell00";
        colors[0, 0] = "Lime";


        isTypeCklicked = true;
        selecteSizeType = 1;

        colorBgP1 = "white";
        colorBgP2 = "greenyellow";
        colorBgP3 = "white";
    }
    private void changecolor3AndSetSizes()
    {
        dimension = 3;
        for (int i = 0; i < colors.GetLength(0); i++)
        {
            for (int j = 0; j < colors.GetLength(1); j++)
            {
                colors[i, j] = "";
            }
        }
        activePosition = "cell00";
        colors[0, 0] = "Lime";

        isTypeCklicked = true;
        selecteSizeType = 2;
        colorBgP1 = "white";
        colorBgP2 = "white";
        colorBgP3 = "greenyellow";
    }
    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string measurementPositionId { get; set; }
    [Parameter]
    public string stringPackValue { get; set; }
    [Parameter]
    public string pmachineIdd { get; set; }
    [Parameter]
    public string fusMachineName { get; set; }


    Machine machine = new Machine();




    private string[] Background { get; set; } = new string[40];

    private async void HighlightSelected1(int i)
    {
        current = "";
        int a = i;
        actPosRow = i;
        current = "current" + i;
        for (int r = 0; r < Background.GetLength(0); r++)
        {
            if (r == i)
            {
                Background[r] = "yellow";

            }
            else
            {
                Background[r] = "";
            }
        }
        //  await JsRuntime.InvokeAsync<object>("Alert", current);
    }



    private string highlight1 { get; set; } = "";
    private string highlight2 { get; set; } = "";
    private string highlight3 { get; set; } = "";
    private string highlight4 { get; set; } = "";

    // private string[] currentRow = new string[40];
    private string[,] idsForCells = new string[40, 3];
    bool down = true;
    bool right = false;
    bool up = false;
    bool left = false;
    decimal avg1 = 0;
    decimal avg2 = 0;
    decimal avg3 = 0;
    private async void select(decimal value)
    {




        if (isEdit)
        {
            for (int i = 0; i < idsForCells.GetLength(0); i++)
            {
                for (int j = 0; j < idsForCells.GetLength(1); j++)
                {

                    if (idsForCells[i, j] == editPosition)
                    {
                        sizesArray[i, j] = value;
                        if (value < mr.FormatMin && value > mr.FormatMax)
                        {
                            colors[i, j] = "#F99B28";
                        }
                        decimal sumd1 = 0;
                        decimal sumd2 = 0;
                        decimal sumd3 = 0;
                        for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                        {

                            sumd1 = sumd1 + sizesArray[ai, 0];
                            sumd2 = sumd2 + sizesArray[ai, 1];
                            sumd3 = sumd3 + sizesArray[ai, 2];

                        }
                        avg1 = sumd1 / 40;
                        avg2 = sumd2 / 40;
                        avg3 = sumd3 / 40;
                    }

                }
            }
            isEdit = false;
        }
        else
        {
            decimal sum1 = 0;
            decimal sum2 = 0;
            decimal sum3 = 0;
            for (int i = 0; i < sizesArray.GetLength(0); i++)
            {

                sum1 = sum1 + sizesArray[i, 0];
                sum2 = sum2 + sizesArray[i, 1];
                sum3 = sum3 + sizesArray[i, 2];

            }
            avg1 = sum1 / 40;
            avg2 = sum2 / 40;
            avg3 = sum3 / 40;
            if (selecteSizeType == 1)
            {

                if (down)
                {

                    for (int i = 0; i < idsForCells.GetLength(0); i++)
                    {
                        for (int j = 0; j < idsForCells.GetLength(1); j++)
                        {

                            if (idsForCells[i, j] == activePosition)
                            {
                                if (i == idsForCells.GetLength(0) - 1)
                                {
                                    sizesArray[i, j] = value;

                                    if (value < mr.FormatMin && value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }

                                    decimal sumf1 = 0;
                                    decimal sumf2 = 0;
                                    decimal sumf3 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sumf1 = sumf1 + sizesArray[ai, 0];
                                        sumf2 = sumf2 + sizesArray[ai, 1];
                                        sumf3 = sumf3 + sizesArray[ai, 2];

                                    }
                                    avg1 = sumf1 / 40;
                                    avg2 = sumf2 / 40;
                                    avg3 = sumf3 / 40;
                                    colors[i, j] = "";
                                    down = false;
                                    right = true;
                                    j++;
                                    activePosition = "cell" + i + j;
                                    colors[i, j] = "Lime";

                                    break;
                                }
                                else
                                {
                                    sizesArray[i, j] = value;
                                    if (value < mr.FormatMin && value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }
                                    decimal sum21 = 0;
                                    decimal sum22 = 0;
                                    decimal sum23 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sum21 = sum21 + sizesArray[ai, 0];
                                        sum22 = sum22 + sizesArray[ai, 1];
                                        sum23 = sum23 + sizesArray[ai, 2];

                                    }
                                    avg1 = sum21 / 40;
                                    avg2 = sum22 / 40;
                                    avg3 = sum23 / 40;
                                    colors[i, j] = "";

                                    down = true;
                                    i++;
                                    activePosition = "cell" + (i) + j;
                                    colors[i, j] = "Lime";

                                    break;

                                }

                            }

                        }
                    }
                    focusToNext();
                    return;
                }
                if (right)
                {

                    for (int i = 0; i < idsForCells.GetLength(0); i++)
                    {
                        for (int j = 0; j < idsForCells.GetLength(1); j++)
                        {
                            colors[i, j] = "";
                            if (idsForCells[i, j] == activePosition)
                            {
                                if (j < idsForCells.GetLength(1) - 1)
                                {
                                    sizesArray[i, j] = value;
                                    if (value < mr.FormatMin || value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }
                                    decimal sum31 = 0;
                                    decimal sum32 = 0;
                                    decimal sum33 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sum31 = sum31 + sizesArray[ai, 0];
                                        sum32 = sum32 + sizesArray[ai, 1];
                                        sum33 = sum33 + sizesArray[ai, 2];

                                    }
                                    avg1 = sum31 / 40;
                                    avg2 = sum32 / 40;
                                    avg3 = sum33 / 40;
                                    j++;

                                    activePosition = "cell" + i + j;
                                    colors[i, j] = "Lime";
                                    if (j == idsForCells.GetLength(1) - 1)
                                    {
                                        up = true;
                                        right = false;
                                        break;
                                    }
                                }
                            }
                            else
                            {

                            }




                        }
                    }
                    focusToNext();
                    return;
                }

                if (up)
                {

                    for (int i = 0; i < idsForCells.GetLength(0); i++)
                    {
                        for (int j = 0; j < idsForCells.GetLength(1); j++)
                        {
                            //colors[i, j] = "";
                            if (idsForCells[i, j] == activePosition)
                            {
                                // colors[i, j] = "";

                                if (i == 0 && j == 1)
                                {
                                    sizesArray[i, j] = value;
                                    if (value < mr.FormatMin || value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }
                                    decimal sum41 = 0;
                                    decimal sum42 = 0;
                                    decimal sum43 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sum41 = sum41 + sizesArray[ai, 0];
                                        sum42 = sum42 + sizesArray[ai, 1];
                                        sum43 = sum43 + sizesArray[ai, 2];

                                    }
                                    avg1 = sum41 / 40;
                                    avg2 = sum42 / 40;
                                    avg3 = sum43 / 40;
                                    break;
                                }

                                if (j == 1)
                                {
                                    sizesArray[i, j] = value;
                                    if (value < mr.FormatMin || value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }
                                    else
                                    {

                                        colors[i, j] = "";

                                    }
                                    decimal sum51 = 0;
                                    decimal sum52 = 0;
                                    decimal sum53 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sum51 = sum51 + sizesArray[ai, 0];
                                        sum52 = sum52 + sizesArray[ai, 1];
                                        sum53 = sum53 + sizesArray[ai, 2];

                                    }
                                    avg1 = sum51 / 40;
                                    avg2 = sum52 / 40;
                                    avg3 = sum53 / 40;
                                    up = false;
                                    right = true;
                                    i--;
                                    activePosition = "cell" + i + j;
                                    colors[i, j] = "Lime";
                                }
                                else if (j == 2)
                                {
                                    sizesArray[i, j] = value;
                                    if (value < mr.FormatMin || value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }
                                    else
                                    {
                                        colors[i, j] = "";

                                    }




                                    decimal sum61 = 0;
                                    decimal sum62 = 0;
                                    decimal sum63 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sum61 = sum61 + sizesArray[ai, 0];
                                        sum62 = sum62 + sizesArray[ai, 1];
                                        sum63 = sum63 + sizesArray[ai, 2];

                                    }
                                    avg1 = sum61 / 40;
                                    avg2 = sum62 / 40;
                                    avg3 = sum63 / 40;
                                    up = false;
                                    left = true;
                                    i--;
                                    activePosition = "cell" + i + j;
                                    colors[i, j] = "Lime";
                                }

                            }
                            else
                            {

                            }




                        }

                    }
                    focusToNext();
                    return;
                }

                if (left)
                {

                    for (int i = 0; i < idsForCells.GetLength(0); i++)
                    {
                        for (int j = 0; j < idsForCells.GetLength(1); j++)
                        {
                            //colors[i, j] = "";
                            if (idsForCells[i, j] == activePosition)
                            {
                                if (j == 2)
                                {
                                    sizesArray[i, j] = value;
                                    if (value < mr.FormatMin || value > mr.FormatMax)
                                    {
                                        colors[i, j] = "#F99B28";
                                    }
                                    decimal sum81 = 0;
                                    decimal sum82 = 0;
                                    decimal sum83 = 0;
                                    for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                    {

                                        sum81 = sum81 + sizesArray[ai, 0];
                                        sum82 = sum82 + sizesArray[ai, 1];
                                        sum83 = sum83 + sizesArray[ai, 2];

                                    }
                                    avg1 = sum1 / 40;
                                    avg2 = sum2 / 40;
                                    avg3 = sum3 / 40;
                                    colors[i, j] = "";
                                    left = false;
                                    up = true;
                                    j--;
                                    activePosition = "cell" + i + j;
                                    colors[i, j] = "Lime";
                                }

                            }
                            else
                            {

                            }




                        }

                    }
                    focusToNext();
                    return;
                }
            }

            if (selecteSizeType == 2)
            {





                for (int i = 0; i < idsForCells.GetLength(0); i++)
                {
                    for (int j = 0; j < idsForCells.GetLength(1); j++)
                    {

                        if (idsForCells[i, j] == activePosition)
                        {
                            if (i == idsForCells.GetLength(0) - 1 && j == idsForCells.GetLength(1) - 1)
                            {
                                sizesArray[i, j] = value;
                                if (value < mr.FormatMin || value > mr.FormatMax)
                                {
                                    colors[i, j] = "#F99B28";
                                }
                                decimal suma1 = 0;
                                decimal suma2 = 0;
                                decimal suma3 = 0;
                                for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                {

                                    suma1 = suma1 + sizesArray[ai, 0];
                                    suma2 = suma2 + sizesArray[ai, 1];
                                    suma3 = suma3 + sizesArray[ai, 2];

                                }
                                avg1 = suma1 / 40;
                                avg2 = suma2 / 40;
                                avg3 = suma3 / 40;
                                break;
                            }

                            colors[i, j] = "";
                            if (j < idsForCells.GetLength(1) - 1)
                            {
                                sizesArray[i, j] = value;
                                if (value < mr.FormatMin || value > mr.FormatMax)
                                {
                                    colors[i, j] = "#F99B28";
                                }
                                decimal sumb1 = 0;
                                decimal sumb2 = 0;
                                decimal sumb3 = 0;
                                for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                {

                                    sumb1 = sumb1 + sizesArray[ai, 0];
                                    sumb2 = sumb2 + sizesArray[ai, 1];
                                    sumb3 = sumb3 + sizesArray[ai, 2];

                                }
                                avg1 = sumb1 / 40;
                                avg2 = sumb2 / 40;
                                avg3 = sumb3 / 40;
                                j++;

                                activePosition = "cell" + i + j;
                                colors[i, j] = "Lime";
                                break;

                            }
                            else if (j == idsForCells.GetLength(1) - 1)
                            {
                                sizesArray[i, j] = value;
                                if (value < mr.FormatMin || value > mr.FormatMax)
                                {
                                    colors[i, j] = "#F99B28";
                                }
                                decimal sumc1 = 0;
                                decimal sumc2 = 0;
                                decimal sumc3 = 0;
                                for (int ai = 0; ai < sizesArray.GetLength(0); ai++)
                                {

                                    sumc1 = sumc1 + sizesArray[ai, 0];
                                    sumc2 = sumc2 + sizesArray[ai, 1];
                                    sumc3 = sumc3 + sizesArray[ai, 2];

                                }
                                avg1 = sumc1 / 40;
                                avg2 = sumc2 / 40;
                                avg3 = sumc3 / 40;
                                j = 0;

                                i++;
                                activePosition = "cell" + i + j;
                                colors[i, j] = "Lime";
                                break;
                            }
                        }





                    }
                }
                focusToNext();
                return;

            }

        }



    }

    private string posToFocusOn = "";
    public async void focusToNext()
    {

        for (int i = 0; i < idsForCells.GetLength(0); i++)
        {
            for (int j = 0; j < idsForCells.GetLength(1); j++)
            {
                if (activePosition == idsForCells[i, j] && i > 5)
                {

                    posToFocusOn = idsForCells[i - 5, j];
                }
            }
        }

        // if (selecteSizeType == 1)
        {
            if (idsForCells[5, 2] == activePosition)
            {
                posToFocusOn = idsForCells[0, 0];
            }

            await JsRuntime.InvokeVoidAsync("blazorHelpers.scrollToFragment", posToFocusOn);

        }




    }

    private void setPos(int i)
    {

        // Color = Color == "Lime" ? "green" : "Lime";
        actPos = i;
        actPosCol = i;

        if (i == 0)
        {
            colorBg1 = "Lime";
            colorBg2 = "";
            colorBg3 = "";
        }
        else if (i == 1)
        {
            colorBg1 = "";
            colorBg2 = "Lime";
            colorBg3 = "";
        }
        else if (i == 2)
        {
            colorBg1 = "";
            colorBg2 = "";
            colorBg3 = "Lime";
        }

        //actPosCol
    }

    private string Color { get; set; } = "Lime";
    private IList<Measurement> Model2;

    private int actPos;


    private int actPosCol;
    private int actPosRow;


    private decimal[] sizes = new decimal[9];

    private decimal[,] sizesArray = new decimal[40, 3];

    private decimal start = 1.51m;

    private decimal selectedValue;
    private decimal[] rowPositionValues = new decimal[3];
    private decimal positionValue;


    public List<decimal> range = new List<decimal>();

    int machineId;
    //   Machine mach = new Machine();
    string current = "current";

    MeasurementType mt = new MeasurementType();

    MeasurementRange mr = new MeasurementRange();
    MeasurementRange mrtest = new MeasurementRange();

    protected async override Task OnInitializedAsync()
    {
        ModelPacks = await this.packRepo.Get(Endpoints.PacksEndpoint);

        machineId = int.Parse(pmachineIdd);

        Ranges = await this.measurementRangeRepo.Get(Endpoints.MeasurementRangeEntpoint);
        mr = Ranges.Where(e => e.Id.Equals(1)).FirstOrDefault();
        //   mrtest = await this.measurementRangeRepo.Get(1);
        //  mach = await machineRepository.Get(Endpoints.MachinesEndpoint, machineId);


        int startValuesOfMeasurement = 0;
        for (int i = 0; i < sizesArray.GetLength(0); i++)
        {

            for (int j = 0; j < sizesArray.GetLength(1); j++)
            {

                sizesArray[i, j] = startValuesOfMeasurement;
            }
        }

        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = start;
            start = start + 0.01m;
        }



        for (int i = 0; i < idsForCells.GetLength(0); i++)
        {
            for (int j = 0; j < idsForCells.GetLength(1); j++)
            {
                idsForCells[i, j] = "cell" + i + j;
            }
        }

        for (int i = 0; i < rows.Length; i++)
        {
            rows[i] = "current" + i;
        }

        mt = await measurementTypeRepository.Get(Endpoints.MeasurementTypeEndpoint, 1);//measPositionRepo.Get(Endpoints.MeasurementPositions, result);
    }


    private void OpenCreateForm(MouseEventArgs e)
    {

        this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }

    private async void GoToCreation(MouseEventArgs e)
    {
        if (isSuccess && isPackCreated)
        {
            this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
        }
        else
        {

            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tiešām vēlies iziet nesaglabājot?");
            if (confirmed)
            {
                this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
            }
        }
        // this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
    }
    private IList<Pack> ModelPacks;
    private IList<MeasurementRange> Ranges;
    bool isSuccess = false;
    bool isPackCreated = false;
    private async void SaveMeasurement()
    {


        // var pid = ModelPacks. Max(el => el.Id) + 1;


        String measurementDateAndTime = DateTime.Now.ToString("g");
        int packId = int.Parse(stringPackValue);

        DateTime shiftTimeStart = Convert.ToDateTime("07:00:00");

        DateTime shiftTimeEnd = Convert.ToDateTime("19:00:00");

        DateTime currentMeasurement = Convert.ToDateTime(measurementDateAndTime);

        //String timeOfTheDayNow = DateTime.Now.ToString("t");
        int shift = 1;

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) >= 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) < 0)
        {
            shift = 1;
        }

        if (DateTime.Compare(currentMeasurement, shiftTimeStart) < 0 && DateTime.Compare(currentMeasurement, shiftTimeEnd) >= 0)
        {
            shift = 2;
        }
        if (pshift != shift.ToString())
        {
            shift = int.Parse(pshift);
        }



        IList<Measurement> measurementsToCreate = new List<Measurement>();
        Pack pack = new Pack();
        Machine machine = new Machine();

        machine = await machineRepository.Get(Endpoints.MachinesEndpoint, int.Parse(pmachineIdd));//m achine.Id);
        LoginModel user = new LoginModel();
        user = await authRepo.Get(Endpoints.AspUsersEndpoint, userId);
        pack.DateCreated = DateTime.Parse(measurementDateAndTime);
        pack.Machine = fusMachineName; //machine.Name;
        pack.Shift = shift;
        pack.Author = user.UserName;
        pack.FusCode = stringPackValue;
        pack.MeasurementTypeName = mt.Name;
        pack.DimensionId = dimension;
        var packToCreate = packRepo.CreateObjectAndReturnId(Endpoints.PacksEndpoint, pack);
        string packStringResult = packToCreate.Result.ToString();

        string firstString = "id";
        string lastString = ",";

        int pos1 = packStringResult.IndexOf(firstString);
        int pos2 = packStringResult.IndexOf(lastString);

        string final = packStringResult.Substring(pos1, pos2 - pos1);

        string[] elements = final.Split(':');



        for (int i = 0; i < sizesArray.GetLength(0); i++)
        {
            Measurement meas = new Measurement();
            meas.DateCreated = DateTime.Parse(measurementDateAndTime);
            meas.Shift = shift;
            meas.UserId = userId;
            meas.MachineName = fusMachineName;
            meas.MeasurementPositionId = int.Parse(measurementPositionId);
            meas.FusPackId = packId;
            meas.PackId = int.Parse(elements[1]);
            meas.MeasurementTypeId = 1;
            for (int j = 0; j < sizesArray.GetLength(1); j++)
            {


                if (j == 0)
                {
                    meas.Measurement1 = sizesArray[i, j];
                }
                if (j == 1)
                {
                    meas.Measurement2 = sizesArray[i, j];
                }
                if (j == 2)
                {
                    meas.Measurement3 = sizesArray[i, j];
                }



            }
            measurementsToCreate.Add(meas);


            isSuccess = await measurementRepo.Create(Endpoints.MeasurementEndpoint, meas);
        }


        if (packToCreate != null && isSuccess)
        {
            isPackCreated = true;
            toastService.ShowToast("Mērījuma dati saglabāti", ToastLevel.Success);
            this.navManager.NavigateTo($"/measurements/{userId}/{measurementPositionId}/create");
        }
    }



    bool visibilitystatus = false;
    bool visibilitystatus2 = false;

    private void Limeuce(MouseEventArgs e)
    {
        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] - 0.01m;
        }

        if (sizes[0] <= 0.00m)
        {
            visibilitystatus = true;
        }
    }


    private void Add(MouseEventArgs e)
    {

        for (int i = 0; i < sizes.Length; i++)
        {

            sizes[i] = sizes[i] + 0.01m;
        }

        if (sizes[0] > 0.00m)
        {
            visibilitystatus = false;
        }

    }


}
